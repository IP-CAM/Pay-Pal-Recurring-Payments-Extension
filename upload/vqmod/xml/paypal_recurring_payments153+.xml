<modification>
	<id>Paypal Recurring Payments</id>
	<version>153.0</version>
	<vqmver>2.1.7</vqmver>  
	<author>Avvici</author> 
	<file name="catalog/controller/account/order.php"> 

	<operation>
            <search position="before"><![CDATA[
			public function index() {
            
            ]]></search>
			
			  <add trim="true"><![CDATA[  
			  private function getOrderStatuses() {
     
			$sql = "SELECT order_status_id,name FROM `" . DB_PREFIX . "order_status` WHERE language_id = '" . (int)$this->config->get('config_language_id') . "' AND name = 'Canceled'";
			
			
			$query = $this->db->query($sql);
			
			return $query->row;
		
	}
			  private function getOrder($order_id) {
		$order_query = $this->db->query("SELECT *, (SELECT CONCAT(c.firstname, ' ', c.lastname) FROM " . DB_PREFIX . "customer c WHERE c.customer_id = o.customer_id) AS customer FROM `" . DB_PREFIX . "order` o WHERE o.order_id = '" . (int)$order_id . "'");

		if ($order_query->num_rows) {
			$reward = 0;
			
			$order_product_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_product` WHERE order_id = '" . (int)$order_id . "'");
		
			foreach ($order_product_query->rows as $product) {
				$reward += $product['reward'];
			}			
			
			$country_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "country` WHERE country_id = '" . (int)$order_query->row['payment_country_id'] . "'");

			if ($country_query->num_rows) {
				$payment_iso_code_2 = $country_query->row['iso_code_2'];
				$payment_iso_code_3 = $country_query->row['iso_code_3'];
			} else {
				$payment_iso_code_2 = '';
				$payment_iso_code_3 = '';
			}

			$zone_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "zone` WHERE zone_id = '" . (int)$order_query->row['payment_zone_id'] . "'");

			if ($zone_query->num_rows) {
				$payment_zone_code = $zone_query->row['code'];
			} else {
				$payment_zone_code = '';
			}
			
			$country_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "country` WHERE country_id = '" . (int)$order_query->row['shipping_country_id'] . "'");

			if ($country_query->num_rows) {
				$shipping_iso_code_2 = $country_query->row['iso_code_2'];
				$shipping_iso_code_3 = $country_query->row['iso_code_3'];
			} else {
				$shipping_iso_code_2 = '';
				$shipping_iso_code_3 = '';
			}

			$zone_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "zone` WHERE zone_id = '" . (int)$order_query->row['shipping_zone_id'] . "'");

			if ($zone_query->num_rows) {
				$shipping_zone_code = $zone_query->row['code'];
			} else {
				$shipping_zone_code = '';
			}
		
			if ($order_query->row['affiliate_id']) {
				$affiliate_id = $order_query->row['affiliate_id'];
			} else {
				$affiliate_id = 0;
			}				
				
			$this->load->model('sale/affiliate');
				
			$affiliate_info = $this->model_sale_affiliate->getAffiliate($affiliate_id);
				
			if ($affiliate_info) {
				$affiliate_firstname = $affiliate_info['firstname'];
				$affiliate_lastname = $affiliate_info['lastname'];
			} else {
				$affiliate_firstname = '';
				$affiliate_lastname = '';				
			}

			$this->load->model('localisation/language');
			
			$language_info = $this->model_localisation_language->getLanguage($order_query->row['language_id']);
			
			if ($language_info) {
				$language_code = $language_info['code'];
				$language_filename = $language_info['filename'];
				$language_directory = $language_info['directory'];
			} else {
				$language_code = '';
				$language_filename = '';
				$language_directory = '';
			}
			
			return array(
				'order_id'                => $order_query->row['order_id'],
				'invoice_no'              => $order_query->row['invoice_no'],
				'invoice_prefix'          => $order_query->row['invoice_prefix'],
				'store_id'                => $order_query->row['store_id'],
				'store_name'              => $order_query->row['store_name'],
				'store_url'               => $order_query->row['store_url'],
				'customer_id'             => $order_query->row['customer_id'],
				'customer'                => $order_query->row['customer'],
				'customer_group_id'       => $order_query->row['customer_group_id'],
				'firstname'               => $order_query->row['firstname'],
				'lastname'                => $order_query->row['lastname'],
				'telephone'               => $order_query->row['telephone'],
				'fax'                     => $order_query->row['fax'],
				'email'                   => $order_query->row['email'],
				'payment_firstname'       => $order_query->row['payment_firstname'],
				'payment_lastname'        => $order_query->row['payment_lastname'],
				'payment_company'         => $order_query->row['payment_company'],
				'payment_company_id'      => $order_query->row['payment_company_id'],
				'payment_tax_id'          => $order_query->row['payment_tax_id'],
				'payment_address_1'       => $order_query->row['payment_address_1'],
				'payment_address_2'       => $order_query->row['payment_address_2'],
				'payment_postcode'        => $order_query->row['payment_postcode'],
				'payment_city'            => $order_query->row['payment_city'],
				'payment_zone_id'         => $order_query->row['payment_zone_id'],
				'payment_zone'            => $order_query->row['payment_zone'],
				'payment_zone_code'       => $payment_zone_code,
				'payment_country_id'      => $order_query->row['payment_country_id'],
				'payment_country'         => $order_query->row['payment_country'],
				'payment_iso_code_2'      => $payment_iso_code_2,
				'payment_iso_code_3'      => $payment_iso_code_3,
				'payment_address_format'  => $order_query->row['payment_address_format'],
				'payment_method'          => $order_query->row['payment_method'],
				'payment_code'            => $order_query->row['payment_code'],				
				'shipping_firstname'      => $order_query->row['shipping_firstname'],
				'shipping_lastname'       => $order_query->row['shipping_lastname'],
				'shipping_company'        => $order_query->row['shipping_company'],
				'shipping_address_1'      => $order_query->row['shipping_address_1'],
				'shipping_address_2'      => $order_query->row['shipping_address_2'],
				'shipping_postcode'       => $order_query->row['shipping_postcode'],
				'shipping_city'           => $order_query->row['shipping_city'],
				'shipping_zone_id'        => $order_query->row['shipping_zone_id'],
				'shipping_zone'           => $order_query->row['shipping_zone'],
				'shipping_zone_code'      => $shipping_zone_code,
				'shipping_country_id'     => $order_query->row['shipping_country_id'],
				'shipping_country'        => $order_query->row['shipping_country'],
				'shipping_iso_code_2'     => $shipping_iso_code_2,
				'shipping_iso_code_3'     => $shipping_iso_code_3,
				'shipping_address_format' => $order_query->row['shipping_address_format'],
				'shipping_method'         => $order_query->row['shipping_method'],
				'shipping_code'           => $order_query->row['shipping_code'],
				'comment'                 => $order_query->row['comment'],
				'total'                   => $order_query->row['total'],
				'reward'                  => $reward,
				'order_status_id'         => $order_query->row['order_status_id'],
				'affiliate_id'            => $order_query->row['affiliate_id'],
				'affiliate_firstname'     => $affiliate_firstname,
				'affiliate_lastname'      => $affiliate_lastname,
				'commission'              => $order_query->row['commission'],
				'language_id'             => $order_query->row['language_id'],
				'language_code'           => $language_code,
				'language_filename'       => $language_filename,
				'language_directory'      => $language_directory,				
				'currency_id'             => $order_query->row['currency_id'],
				'currency_code'           => $order_query->row['currency_code'],
				'currency_value'          => $order_query->row['currency_value'],
				'ip'                      => $order_query->row['ip'],
				'forwarded_ip'            => $order_query->row['forwarded_ip'], 
				'user_agent'              => $order_query->row['user_agent'],	
				'accept_language'         => $order_query->row['accept_language'],					
				'date_added'              => $order_query->row['date_added'],
				'date_modified'           => $order_query->row['date_modified']
			);
		} else {
			return false;
		}
	}
			  private function addOrderHistory($order_id, $data) {
		$this->db->query("UPDATE `" . DB_PREFIX . "order` SET order_status_id = '" . (int)$data['order_status_id'] . "', date_modified = NOW() WHERE order_id = '" . (int)$order_id . "'");

		$this->db->query("INSERT INTO `" . DB_PREFIX . "order_history` SET order_id = '" . (int)$order_id . "', order_status_id = '" . (int)$data['order_status_id'] . "', notify = '" . (isset($data['notify']) ? (int)$data['notify'] : 0) . "', comment = 'Profile was canceled!', date_added = NOW()");

		$order_info = $this->getOrder($order_id);

		// Send out any gift voucher mails
		if ($this->config->get('config_complete_status_id') == $data['order_status_id']) {
			$this->load->model('sale/voucher');

			$results = $this->getOrderVouchers($order_id);
			
			foreach ($results as $result) {
				$this->model_sale_voucher->sendVoucher($result['voucher_id']);
			}
		}

      	if ($data['notify']) {
			$language = new Language($order_info['language_directory']);
			$language->load($order_info['language_filename']);
			$language->load('mail/order');

			$subject = sprintf($language->get('text_subject'), $order_info['store_name'], $order_id);

			$message  = $language->get('text_order') . ' ' . $order_id . "\n";
			$message .= $language->get('text_date_added') . ' ' . date($language->get('date_format_short'), strtotime($order_info['date_added'])) . "\n\n";
			
			$order_status_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_status WHERE order_status_id = '" . (int)$data['order_status_id'] . "' AND language_id = '" . (int)$order_info['language_id'] . "'");
				
			if ($order_status_query->num_rows) {
				$message .= $language->get('text_order_status') . "\n";
				$message .= $order_status_query->row['name'] . "\n\n";
			}
			
			if ($order_info['customer_id']) {
				$message .= $language->get('text_link') . "\n";
				$message .= html_entity_decode($order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $order_id, ENT_QUOTES, 'UTF-8') . "\n\n";
			}
			
			if ($data['comment']) {
				$message .= $language->get('text_comment') . "\n\n";
				$message .= strip_tags(html_entity_decode($data['comment'], ENT_QUOTES, 'UTF-8')) . "\n\n";
			}

			$message .= $language->get('text_footer');

			$mail = new Mail();
			$mail->protocol = $this->config->get('config_mail_protocol');
			$mail->parameter = $this->config->get('config_mail_parameter');
			$mail->hostname = $this->config->get('config_smtp_host');
			$mail->username = $this->config->get('config_smtp_username');
			$mail->password = $this->config->get('config_smtp_password');
			$mail->port = $this->config->get('config_smtp_port');
			$mail->timeout = $this->config->get('config_smtp_timeout');
			$mail->setTo($order_info['email']);
			$mail->setFrom($this->config->get('config_email'));
			$mail->setSender($order_info['store_name']);
			$mail->setSubject(html_entity_decode($subject, ENT_QUOTES, 'UTF-8'));
			$mail->setText(html_entity_decode($message, ENT_QUOTES, 'UTF-8'));
			$mail->send();
		}
	}
			private function updateRecurringProfileShort($profileid) {
			
			//CONNECT WITH PAY PAL TO GET RECURRING PROFILE INFORMATION
	    $request  = 'METHOD=' .urlencode("GetRecurringPaymentsProfileDetails");
	    $request .= '&VERSION=' .urlencode("53.0");
	    $request .= '&USER=' . urlencode($this->config->get('pp_pro_recurring_username'));
		$request .= '&PWD=' . urlencode($this->config->get('pp_pro_recurring_password'));
		$request .= '&SIGNATURE=' . urlencode($this->config->get('pp_pro_recurring_signature'));
		
		//new profile fields
		$request .= '&PROFILEID=' . urlencode($profileid);
		
		
		$curl = curl_init('https://api-3t.paypal.com/nvp');
		
		curl_setopt($curl, CURLOPT_PORT, 443);
		curl_setopt($curl, CURLOPT_HEADER, 0);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_FORBID_REUSE, 1);
        curl_setopt($curl, CURLOPT_FRESH_CONNECT, 1);
        curl_setopt($curl, CURLOPT_POST, 1);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $request);
		$response = curl_exec($curl);
 		
		curl_close($curl);
 
		if (!$response) {
			$this->log->write('Get Profile Recurring details failed: ' . curl_error($curl) . '(' . curl_errno($curl) . ')');
		}
 
 		$response_data = array();
 
		parse_str($response, $response_data);
		if (($response_data['ACK'] == 'Success') || ($response_data['ACK'] == 'SuccessWithWarning')) {
          
			
		   $data = array(
		'paypal_recurringprofile_id' => isset($response_data['PROFILEID']) ? $response_data['PROFILEID'] : "",
		'paypal_recurring_status' => isset($response_data['STATUS']) ? $response_data['STATUS'] : "");
		
			//UPDATE TRIAL PROFILE WITH CURRENT INFORMATION			
			$this->updateRecurringInfoShort($data);
		}
	}
	private function getRecurringCustomerGroupId() {
		
				
		$query = $this->db->query("SELECT customer_group_id FROM `" . DB_PREFIX . "customer_group` WHERE is_recurring = '1'");
		
		return $query->row;	
	}
	private function getCustomerId($pid) {
		
				
		$query = $this->db->query("SELECT customer_id FROM `" . DB_PREFIX . "order` WHERE paypal_recurringprofile_id = '" . (string)$pid . "'");
		
		return $query->row;	
	}
	private function updateRecurringInfoShort($data = array()) {			
		
		
$this->db->query("UPDATE `" . DB_PREFIX . "order` SET paypal_recurringprofile_id = '" . (string)$data['paypal_recurringprofile_id'] . "',paypal_recurring_status = '" . (string)$data['paypal_recurring_status'] . "', date_modified = NOW() WHERE paypal_recurringprofile_id = '" . (string)$data['paypal_recurringprofile_id'] . "' AND paypal_is_original_order = '1'");
	$customer_id = $this->getCustomerId($data['paypal_recurringprofile_id']);	
		$recurring_group_id = $this->getRecurringCustomerGroupId();	
		if($recurring_group_id){
			$recurring_group_id = $recurring_group_id['customer_group_id'];
		}else{
			$recurring_group_id = $this->config->get('config_customer_group_id');
			
		}
		if($data['paypal_recurring_status'] == "Cancelled"){
		$this->db->query("UPDATE `" . DB_PREFIX . "customer` SET customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' WHERE customer_id = '" . (string)$customer_id['customer_id'] . "'");
		$this->db->query("UPDATE `" . DB_PREFIX . "order` SET customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' WHERE customer_id = '" . (string)$customer_id['customer_id'] . "'");
		}else{
		$this->db->query("UPDATE `" . DB_PREFIX . "customer` SET customer_group_id = '" . (int)$recurring_group_id . "' WHERE customer_id = '" . (string)$customer_id['customer_id'] . "'");
		$this->db->query("UPDATE `" . DB_PREFIX . "order` SET customer_group_id = '" . (int)$recurring_group_id . "' WHERE customer_id = '" . (string)$customer_id['customer_id'] . "'");
		}	
}
			   ]]></add>     
	</operation>
		<operation>
            <search position="after"><![CDATA[
			public function index() {
            
            ]]></search>
			
			  <add trim="true"><![CDATA[  
			   
			 if (isset($this->session->data['success2'])) {
    		$this->data['success'] = $this->session->data['success2'];
			
			unset($this->session->data['success2']);
		} else {
			$this->data['success'] = '';
		}
		if (isset($this->session->data['error2'])) {
    		$this->data['error'] = $this->session->data['error2'];
			
			unset($this->session->data['error2']);
		} else {
			$this->data['error'] = '';
		}
			   ]]></add>     
	</operation>
<operation>
            <search position="after" ><![CDATA[
			$this->data['orders'] = array();
            
            ]]></search>
			
			  <add trim="true"><![CDATA[  
			  
			  if (isset($this->request->get['cancel']) && isset($this->request->get['profile_id'])) {
			 
			/// CONNECT WITH PAY PAL TO CHANGE TRIAL PROFILE STATUS
		$request  = 'METHOD=ManageRecurringPaymentsProfileStatus';
	    $request .= '&VERSION=' .urlencode("53.0");
	    $request .= '&USER=' . urlencode($this->config->get('pp_pro_recurring_username'));
		$request .= '&PWD=' . urlencode($this->config->get('pp_pro_recurring_password'));
		$request .= '&SIGNATURE=' . urlencode($this->config->get('pp_pro_recurring_signature'));
		$status = 'Cancel';
		//new profile fields
		$request .= '&PROFILEID=' . urlencode($this->request->get['profile_id']);
		
		$request .= '&ACTION=' . urlencode($status);
		
		$curl = curl_init('https://api-3t.paypal.com/nvp');
		
		curl_setopt($curl, CURLOPT_PORT, 443);
		curl_setopt($curl, CURLOPT_HEADER, 0);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_FORBID_REUSE, 1);
        curl_setopt($curl, CURLOPT_FRESH_CONNECT, 1);
        curl_setopt($curl, CURLOPT_POST, 1);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $request);
		$response = curl_exec($curl);
 		
		curl_close($curl);
 
		if (!$response) {
			$this->log->write('Cancel Profile Recurring details failed: ' . curl_error($curl) . '(' . curl_errno($curl) . ')');
		}
 
 		$response_data = array();
 
		parse_str($response, $response_data);
		
		if (($response_data['ACK'] == 'Success') || ($response_data['ACK'] == 'SuccessWithWarning')) {
						
			//Now reconnect with Pay Pal to get the new profile status
			
	
			$pid = '';
			$status = '';
		
            if (isset($response_data['PROFILEID'])) {
				$pid .=  $response_data['PROFILEID'];
			
						
			//UPDATE TRIAL PROFILE WITH CURRENT INFORMATION AND RELOAD PAGE
			 $this->updateRecurringProfileShort($pid);
			 //ADD TO ORDER HISTORY LOG
			 $data = array();
			
			   $statuses = $this->getOrderStatuses();
			 
			   if($statuses['name'] == "Canceled"){
			   $sid = $statuses['order_status_id'];
			   
			   }else{
			   $sid = 0;
			   
			   }
			 $data = array('order_status_id' => $sid , 'notify' => '1');
			  $this->session->data['success2'] = 'Success: You have canceled this profile.';
			  $this->addOrderHistory($this->request->get['oid'], $data);
			 
			   $this->redirect($this->url->link('account/order', '', 'SSL'));
			
			}else{
			
			 $this->session->data['error2'] = "Error: Incompatible status change. Try again.";
			}
		}else{
			$this->session->data['error2'] = $response_data['L_LONGMESSAGE0'];
		}
		
		
		} 
			
			$profile_check = $this->db->query("SELECT order_id,paypal_recurringprofile_id,paypal_recurring_status,paypal_recurring_startdate,paypal_recurring_count,paypal_recurring_cyclesremaining FROM `" . DB_PREFIX . "order` WHERE	 customer_id = '".(int)$this->customer->getId()."' AND paypal_is_original_order = '1' ORDER BY order_id ASC");
             $this->data['profile_data'] = array();
			  if($profile_check){
			  foreach($profile_check->rows as $data){
			  $gross = $this->db->query("SELECT SUM(paypal_recurring_lastpaymentamount) AS total FROM `" . DB_PREFIX . "order` WHERE paypal_recurringprofile_id = '" . (string)$data['paypal_recurringprofile_id'] . "'");
			   $this->data['profile_data'][] = array(
			   'profile_id' => $data['paypal_recurringprofile_id'],
			   'status' => $data['paypal_recurring_status'],
			   'order_id' => $data['order_id'],
			   'gross' => $gross->row['total'],	
			   'cancel' => $this->url->link('account/order', 'profile_id=' . $data['paypal_recurringprofile_id'].'&oid=' . $data['order_id'] . '&cancel=true', 'SSL'),			  
			   'started' => date($this->language->get('date_format_short'), strtotime($data['paypal_recurring_startdate'])),
			   'remaining' => $data['paypal_recurring_cyclesremaining'] == '9223372036854775807' ? 'Never Ending' : $data['paypal_recurring_cyclesremaining']
			   
			   );
			  }
			  }else{
			  
			   $this->data['profile_data'] = array();
			  }
			   ]]></add>     
	</operation>
	
</file>
	<file name="catalog/view/theme/*/template/account/order_list.tpl">
	<operation>
            <search position="after"><![CDATA[
			<div class="breadcrumb">
           
            ]]></search>
			
			  <add trim="true"><![CDATA[   
			
			<?php if ($success) { ?>
<div class="success"><?php echo $success; ?></div>
<?php } ?>
<?php if ($error) { ?>
<div class="error"><?php echo $error; ?></div>
<?php } ?>
			   ]]></add>     
	</operation>
<operation>
            <search position="after"><![CDATA[
			<h1><?php echo $heading_title; ?></h1>
           
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
			 <h2> Recurring Profile Management</h2>
			 
			 <?php if($profile_data){?>
			 <p><strong>Current Profiles</strong></p>
			 <table class="list">
			   <thead>
                  <tr>
			 <?php foreach($profile_data as $data){?>
			  <td class="left">Profile ID</td> 
			 <td class="left">Total Gross</td> 
			 <td class="left">Date Started</td>
			 <td class="left">Cycles Remaining</td> 
			<td class="left">Status</td> 
			 </tr>
    </thead>
	  <tbody>
      <tr>
	   <td class="left"><?php echo $data['profile_id'];?></td>
	   <td class="left"><span style="color: #060; font-size:14px;">$<?php echo number_format($data['gross'],2);?></span></td>
	   <td class="left"><?php echo $data['started'];?></td>
	   <td class="left"><?php echo $data['remaining'];?>	 </td>
	   <td class="left"><?php echo $data['status'];?></td>
	     </tr>
    </tbody>
  </table>
			<?php if($this->config->get('pp_pro_recurring_usermanage')){?>

		    <a href="<?php echo $data['cancel'];?>" class="button">Cancel Subscription</a><br><br>
			 <?}?>
			 <?php }?>
			 <?php }else{?>
			 
			 This account has 0 recurring profiles.
			 <?php }?>
			   ]]></add>     
	</operation>
	
</file>
<file name="admin/controller/common/header.php">
<operation>
            <search position="after"><![CDATA[
			$this->data['home'] = $this->url->link('common/home', 'token=' . $this->session->data['token'], 'SSL');
            
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
			 $this->data['recurringorder'] = $this->url->link('sale/recurring_order', 'token=' . $this->session->data['token'], 'SSL');
			 $this->data['text_recurringorder'] = $this->language->get('text_recurringorder');
			   ]]></add>     
	</operation>
	<operation>
            <search position="after"><![CDATA[
			protected function index() {
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
			  $this->document->addScript('view/javascript/jquery/colorbox/jquery.colorbox.js');
		      $this->document->addStyle('view/javascript/jquery/colorbox/colorbox.css');
			  $this->document->addStyle('view/stylesheet/recurring.css');
   ]]></add>     
	</operation>
</file>
<file name="admin/language/english/common/header.php">
<operation>
            <search position="before"><![CDATA[
			$_['heading_title']

            ]]></search>
			
			  <add trim="true"><![CDATA[   	
			 $_['text_recurringorder'] = 'Recurring Orders';
			  ]]></add>     
	</operation>
	
</file>
<file name="admin/model/catalog/product.php">
  <operation>
            <search position="replace"><![CDATA[
minimum = '" . (int)$data['minimum'] . "', 
            ]]></search>
            <add><![CDATA[
minimum = '" . (int)$data['minimum'] . "', maximum = '" . (int)$data['maximum'] . "', 
            ]]></add>
        </operation>
<operation>
            <search position="before"><![CDATA[
			public function addProduct($data) {
            ]]></search>
			
			  <add trim="true"><![CDATA[ 
			  
			  
			   public function getRecurringItemName($product_id) {
		$query = $this->db->query("SELECT name FROM " . DB_PREFIX . "product_description WHERE product_id = '" . (int)$product_id . "'");
		
		return $query->row['name'];
	}
			   
			 public function getRecurringItems() {
		$query = $this->db->query("SELECT product_id,image,model,price,quantity FROM " . DB_PREFIX . "product WHERE is_recurring = '1'");
		
		return $query->rows;
	}
	
	public function getTrialItemName($product_id) {
		$query = $this->db->query("SELECT name FROM " . DB_PREFIX . "product_description WHERE product_id = '" . (int)$product_id . "'");
		
		return $query->row['name'];
	}
			   
			 public function getTrialItems() {
		$query = $this->db->query("SELECT product_id,image,model,price,quantity FROM " . DB_PREFIX . "product WHERE is_trial = '1'");
		
		return $query->rows;
	}
	 public function getComboItems() {
		$query = $this->db->query("SELECT product_id,image,model,price,quantity,recurring_combo FROM " . DB_PREFIX . "product WHERE is_trial = '1' AND is_combo = '1'");
		
		return $query->rows;
	}
				]]></add>     
	</operation>
<operation>
            <search position="after"><![CDATA[
			$product_id = $this->db->getLastId();
            ]]></search>
			
			  <add trim="true"><![CDATA[  
			  if(isset($data['recurringitem'])){
			  $isrecurring = $data['recurringitem'];
			  }else{
			  $isrecurring = 0;
			  }
			   if(isset($data['trialitem'])){
			  $istrial = $data['trialitem'];
			  }else{
			  $istrial = 0;
			  }
			   if(isset($data['appendedregularproducts'])){
			  $combo = serialize($data['appendedregularproducts']);
			   $iscombo = 1;
			  }else{
			  $combo = '';
			   $iscombo = 0;
			  }
	    $this->db->query("UPDATE " . DB_PREFIX . "product SET is_recurring = '" . (int)$isrecurring . "',is_combo = '" . (int)$iscombo . "',is_trial = '" . (int)$istrial . "' , recurring_combo = '" . (string)$combo . "'WHERE product_id = '" . (int)$product_id . "'");
    
				]]></add>     
	</operation>
	<operation>
            <search position="after"><![CDATA[
			public function editProduct($product_id, $data) {

            ]]></search>
			
			  <add trim="true"><![CDATA[  
	 if(isset($data['recurringitem'])){
			  $isrecurring = $data['recurringitem'];
			  }else{
			  $isrecurring = 0;
			  }
	
	 if(isset($data['trialitem'])){
			  $istrial = $data['trialitem'];
			  }else{
			  $istrial = 0;
			  }
			   if(isset($data['appendedregularproducts'])){
			  $combo = serialize($data['appendedregularproducts']);
			    $iscombo = 1;
			  }else{
			  $combo = '';
			    $iscombo = 0;
			  }
            $this->db->query("UPDATE " . DB_PREFIX . "product SET is_recurring = '" . (int)$isrecurring . "',is_combo = '" . (int)$iscombo . "',is_trial = '" . (int)$istrial . "' , recurring_combo = '" . (string)$combo . "'WHERE product_id = '" . (int)$product_id . "'");

    
				]]></add>     
	</operation>

</file>


<file name="admin/view/template/catalog/product_form.tpl">

<operation>

            <search position="before"><![CDATA[
			<?php echo $footer; ?>

            ]]></search>
			
			  <add trim="true"><![CDATA[   
			 <script type="text/javascript"><!--
		$("#inline").colorbox({inline:true, width:"50%"});
		$("#inline2").colorbox({inline:true, width:"50%"});
		$("#inline3").colorbox({inline:true, width:"50%"});
$('.colorbox').colorbox({
	overlayClose: true,
	opacity: 0.5
});
//--></script> 
			  ]]></add>     
	</operation>
<operation>

            <search position="after"><![CDATA[
			<div id="tab-data">

            ]]></search>
			
			  <add trim="true"><![CDATA[ 
			
			  <table class="form">
            <tr>
              <td><a href="javascript:%20void(0)" onmouseover="Tip('Marked as a Recurring Item. These items are created for the Recurring System. If you have more than one (which is typical) they will be placed in a special group. Any one of the items can be added to the cart but not all at the same time, as well as not being able to mix with normal products. This makes sense because you can only have ONE PROFILE AT A TIME. The item, if marked, will kick all other items out of the cart and/or be removed from the cart if attempted to mix with a normal item. ',TITLE,'Mark As Recurring Item',DURATION,0,FOLLOWMOUSE,true,STICKY,false,PADDING, 5,WIDTH,400)" onmouseout="UnTip()"><img src="view/image/help.png" style="position:relative;top:2px;" alt="" width="16" height="16" border="0"/></a>  <strong>Mark As Recurring Item</strong> <br><small>(Please read tooltip)</small></td>
              <td align="left"><input type="checkbox" id="recurringitem" name="recurringitem" <?php if($isrecurring){?> checked <?php } ?> value="1"> <a id='inline' class="button" href="#inline-content">Current Regular Recurring Items</a></td>
            </tr>	
			
			 <tr>
              <td><a href="javascript:%20void(0)" onmouseover="Tip('Marked as a Trial Item. If this is checked off then the item will show up in the product list when setting up your trial(s) in EXTENSIONS>PAYMENTS. It also flags the system to make sure that you DO set up a trial or multiple trials if you are offering the items as such on your store front',TITLE,'Mark As Trial Item',DURATION,0,FOLLOWMOUSE,true,STICKY,false,PADDING, 5,WIDTH,400)" onmouseout="UnTip()"><img src="view/image/help.png" style="position:relative;top:2px;" alt="" width="16" height="16" border="0"/></a>  <strong>Mark As Trial Item</strong> <br><small>(Please read tooltip)</small></td>
              <td align="left"><input type="checkbox" id="trialitem" name="trialitem" <?php if($istrial){?> checked <?php } ?> value="1"> <a id='inline2' class="button" href="#inline-content2">Current Trial Items</a></td>
            </tr>			
			
			
			</table>
			<?php if($recurring_check > 0){?>
			 <div id="appendp1" <?php if(!$istrial){?> style="display:none;" <?php }?>>
        <table  width="600">
         <tr>
            <td><a href="javascript:%20void(0)" onmouseover="Tip('If you are offering a Trial Item then once the trial expires the customer will typcially carry on with a normal recurring item/subscription. Here you will JOIN a trial item with a recurring item. Once the trial expires, the regular recurring item will go into action along with the regular profile cost. That cost is determained by they cost of the regular recurring item(s). <strong>NOTE:</strong> It is up to you to explain this in the trial description on your store front. Customers need to know and understand the terms and conditions.',TITLE,'Combine Trial and Regular Recurring Items',DURATION,0,FOLLOWMOUSE,true,STICKY,false,PADDING, 5,WIDTH,400)" onmouseout="UnTip()"><img src="view/image/help.png" style="position:relative;top:2px;" alt="" width="16" height="16" border="0"/></a> Combine Trial & Regular Recurring Items<br> <br><a id='inline3' class="button" href="#inline-content3">Current Combinations</a></td>
           
          </tr>
                

        <table>
		
                <tr>
                  <td style="padding: 0;" colspan="3">Start by choosing a category, then choose a product(s) to append.<br /><strong><small>Note: normally you will only choose one item. Whether you choose one or MORE, the cost of these items will will determin the Regular Profile Amount upon Trial expiry.</small></strong><br /><br /><select id="category" style="margin-bottom: 5px;" onchange="getProducts();">
                     
					  <?php foreach ($categories as $category) { ?>
                      <option value="<?php echo $category['category_id']; ?>"><?php echo $category['name']; ?></option>
                      <?php } ?>
                    </select></td>
                </tr>
                <tr>
                  <td style="padding: 0;"><select multiple="multiple" id="product" size="10" style="width: 350px;">
                    </select></td>
                  <td style="vertical-align: middle;"><input type="button" id="add" value="--&gt;" onclick="addRelated();" />
                    <br />
                    <input type="button" value="&lt;--" onclick="removeRelated();" /></td>
                  <td style="padding: 0;"><select multiple="multiple" name="appendedregularproducts[]" id="related" size="10" style="width: 350px;">
                  <?php if($appendedregularproducts){?>
                  <?php foreach($appendedregularproducts as $product){?>
                  <option value="<?php echo $product['product_id'];?>"><?php echo $product['name'];?></option>
                   <?php }?>
                  
                  <?php }?>
                   </select>
                   
                   
              
                    </td>
                </tr>
              </table>
         
	
       </div>
	   <?php }else{?>
	 <div id="warning" style=" font-size:12px; color:#F00; padding:10px;">You need to create Regular Recurring Items in order to create a combination!</div>
	   <?php }?>
	   <script type="text/javascript"><!--
	   $('#save').live('click', function() {
			       $('#related').find('option').each(function() {
	            $(this).attr('selected', 'selected');
	        });
			 $('#related2').find('option').each(function() {
	            $(this).attr('selected', 'selected');
	        });
		$('#form').submit();
			  });
function addRelated() {
	$('#product :selected').each(function() {
				
		$('#related option[value=\'' + $(this).attr('value') + '\']').remove();
		
		$('#related').append('<option value="' + $(this).attr('value') + '">' + $(this).text() + '</option>');
		
	});
}
function removeRelated() {
	$('#related :selected').each(function() {
		$(this).remove();
		
	});
}

function getProducts() {
	$('#product option').remove();
	<?php if (isset($this->request->get['product_id'])) {?>
	var product_id = "<?php echo $this->request->get['product_id'] ?>";
	<?php } else { ?>
	var product_id = 0;
	<?php } ?>
	$.ajax({
		url: 'index.php?route=catalog/product/category&token=<?php echo $token; ?>&category_id=' + $('#category').attr('value'),
		dataType: 'json',
			beforeSend: function() {
			$('#category').after('<span class="wait">&nbsp;<img src="view/image/loading.gif" alt="" />..loading</span>');
		},
		complete: function() {
			$('.wait').remove();
		},
		success: function(data) {
		
		
			for (i = 0; i < data.length; i++) {
			
				if (data[i]['product_id'] == product_id) { continue; }
	 			$('#product').append('<option value="' + data[i]['product_id'] + '">' + data[i]['name'] + ' (' + data[i]['model'] + ') </option>');
			}
			
		}
	});
}

			 $('#recurringitem').change(function(){
			   var selectedEffect = "blind";	
	     var options = {};
		$('#related').empty();
		if (!$('#appendp1').is(":hidden")){
		$("#appendp1").hide( selectedEffect, options, 300);
		}

		if($('#trialitem').is(':checked')){
		$('#trialitem').attr('checked', false);
		
		}
		
		
		
	});
	 $('#trialitem').change(function(){
	  var selectedEffect = "blind";	
	 var options = {};
		$('div#appendp1v:hidden').show();
		if ($('#appendp1').is(":hidden")){
		$( "#appendp1" ).show( selectedEffect, options, 300);
		}

		if($('#recurringitem').is(':checked')){
		$('#recurringitem').attr('checked', false);
		
		}
	
		if(!$('#trialitem').is(':checked')){
		$( "#appendp1" ).hide( selectedEffect, options, 300);
		
		}
		
	});
getProducts();
//--></script>
	   <table class="form">
			 <tr>
              <td><a href="javascript:%20void(0)" onmouseover="Tip('Most of the time you will not want to offer more than 1 recurring item because by its very nature it does not need to be more than one. For recurring items we recommend you set a max quantity of 1.',TITLE,'Max Quantity - Recurring',DURATION,0,FOLLOWMOUSE,true,STICKY,false,PADDING, 5,WIDTH,400)" onmouseout="UnTip()"><img src="view/image/help.png" style="position:relative;top:2px;" alt="" width="16" height="16" border="0"/></a> <strong><?php echo $entry_maximum; ?></strong></td>
              <td><input type="text" name="maximum" value="<?php echo $maximum; ?>" size="2" /></td>
            </tr>
			
			</table>
			 <div style='display:none'>
			<div id='inline-content3' style='padding:10px; background:#fff;height:300px;overflow:auto;'>
			
            <h3>Current Combinations</h3>
			<?php if($combolist){?>
			<?php foreach($combolist as $value){?>
			<?php echo '<small><strong>'."Name: ".'</small></strong>'.$value['name'];?> <br>
			<?php echo '<small><strong>'."Price: ".'</small></strong>'.$value['price'];?> <br>
			<?php echo '<small><strong>'."Quantity: ".'</small></strong>'.$value['quantity'];?> <br>
			<?php echo '<small><strong>'."Model: ".'</small></strong>'.$value['model'];?> <br>
			<img src="<?php echo $value['tinythumb']; ?>" alt=""  />
			<br>
			<?php echo '<small><strong>'."Combined Regular Recurring Item(s): ".'</small></strong>';?> <br>
			<?php foreach($value['comboitems'] as $items){?>
			<span style="color:#090; font-weight:bold; text-transform:uppercase;"><?php echo $items['name'];?></span><br>
			<?php }?>
			<br>	<br>
			
			<?php }?>
			<?php }else{?>
			There are no current combined items.
			<?php }?>
			
			
			</div></div>
			 <div style='display:none'>
			<div id='inline-content2' style='padding:10px; background:#fff;height:300px;overflow:auto;'>
			
            <h3>Current Trial Items</h3>
			<?php if($triallist){?>
			<?php foreach($triallist as $value){?>
			<?php echo '<small><strong>'."Name: ".'</small></strong>'.$value['name'];?> <br>
			<?php echo '<small><strong>'."Price: ".'</small></strong>'.$value['price'];?> <br>
			<?php echo '<small><strong>'."Quantity: ".'</small></strong>'.$value['quantity'];?> <br>
			<?php echo '<small><strong>'."Model: ".'</small></strong>'.$value['model'];?> <br>
			<img src="<?php echo $value['tinythumb']; ?>" alt=""  />
			<br>
			
			<?php }?>
			<?php }else{?>
			There are no current trial items.
			<?php }?>
			
			
			</div></div>
			  <div style='display:none'>
			<div id='inline-content' style='padding:10px; background:#fff;height:300px;overflow:auto;'>
			
            <h3>Current Recurring Items</h3>
			<?php if($recurringlist){?>
			<?php foreach($recurringlist as $value){?>
			<?php echo '<small><strong>'."Name: ".'</small></strong>'.$value['name'];?> <br>
			<?php echo '<small><strong>'."Price: ".'</small></strong>'.$value['price'];?> <br>
			<?php echo '<small><strong>'."Quantity: ".'</small></strong>'.$value['quantity'];?> <br>
			<?php echo '<small><strong>'."Model: ".'</small></strong>'.$value['model'];?> <br>
			<img src="<?php echo $value['tinythumb']; ?>" alt=""  />
			<br>
			
			<?php }?>
			<?php }else{?>
			There are no current recurring items.
			<?php }?>
			
			
			</div></div>
			  ]]></add>     
	</operation>
	<operation>
            <search position="replace"><![CDATA[
			<a onclick="$('#form').submit();" class="button"><?php echo $button_save; ?></a>
            
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
			<a id="save" class="button"><?php echo $button_save; ?></a></script>
			   ]]></add>     
	</operation>	

</file>

<file name="admin/view/template/common/header.tpl">
<operation>
            <search position="after"><![CDATA[
			<body>
            
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
			<script type="text/javascript" src="view/javascript/wz_tooltip.js"></script>
			   ]]></add>     
	</operation>	

<operation>
            <search position="after"><![CDATA[
			<li><a href="<?php echo $order; ?>"><?php echo $text_order; ?></a></li>

            ]]></search>
			
			  <add trim="true"><![CDATA[   
			  
			  <?php if ($this->config->get('pp_pro_recurring_signature')){?>	
			<li><a href="<?php echo $recurringorder; ?>"><?php echo $text_recurringorder; ?></a></li>
			<?php }?>
			  ]]></add>     
	</operation>
	
</file>
<file name="admin/controller/extension/payment.php">

<operation>
            <search position="after"><![CDATA[
			$this->model_setting_extension->install('payment', $this->request->get['extension']);
            ]]></search>
			
			  <add trim="true"><![CDATA[ 
			  
			  //DO NOT ALTER THIS CODE. WARNING
			if($this->request->get['extension'] === "pp_pro_recurring"){
			 //RUN SQL HERE

//Create Reasons Table 
 $this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "paypal_recurring_reasons` (
   `id` int(2) unsigned NOT NULL auto_increment,
   `reason` text NOT NULL, 
     PRIMARY KEY  (`id`)
   ) ENGINE=MyISAM  DEFAULT CHARSET=utf8");  
   //Create Refund Reasons Table 
 $this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "paypal_recurring_refund_reasons` (
   `id` int(3) unsigned NOT NULL auto_increment,
   `reason` text NOT NULL, 
     PRIMARY KEY  (`id`)
   ) ENGINE=MyISAM  DEFAULT CHARSET=utf8");  
   
   //Create Trials Table 
   $this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "paypal_recurring_trials` (
   `trial_id` int(3) unsigned NOT NULL auto_increment,   
   `trial_period` varchar(10) NOT NULL,
   `trial_product` int(10) NOT NULL,
   `trial_frequency` int(3) NOT NULL,
   `trial_cycles` int(3) NOT NULL,
   `trial_status` tinyint(1) NOT NULL,
   `trial_amount` decimal(15,4) NOT NULL, 
     PRIMARY KEY  (`trial_id`)
   ) ENGINE=MyISAM  DEFAULT CHARSET=utf8");  
   
    //Create Recurring Items Table 
   $this->db->query("CREATE TABLE IF NOT EXISTS `" . DB_PREFIX . "paypal_recurring_items` (
   `item_id` int(3) unsigned NOT NULL auto_increment,   
   `item_period` varchar(10) NOT NULL,
   `item_product` int(10) NOT NULL,
   `item_frequency` int(3) NOT NULL,
   `item_cycles` int(3) NOT NULL,
   `item_status` tinyint(1) NOT NULL,  
     PRIMARY KEY  (`item_id`)
   ) ENGINE=MyISAM  DEFAULT CHARSET=utf8");  
   
     //Update customer_group table with field
	 $fields = $this->db->query('SHOW COLUMNS FROM `' . DB_PREFIX . 'customer_group`');
	
    $columns = $fields->num_rows;
	$finfo = mysqli_fetch_field_direct($fields, 1);
     for ($i = 0; $i < $columns; $i++) {$field_array[] = $finfo->name;}
	  if (!in_array('is_recurring', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'customer_group` ADD `is_recurring` tinyint (1) DEFAULT 0 NOT NULL AFTER customer_group_id');
    }	
	 //Update product table with field
	
$fields = $this->db->query('SHOW COLUMNS FROM `' . DB_PREFIX . 'product`');
     $columns = $fields->num_rows;
     for ($i = 0; $i < $columns; $i++) {$field_array[] = mysql_field_name($fields, $i);}
	  if (!in_array('is_recurring', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'product` ADD `is_recurring` tinyint (1) DEFAULT 0 NOT NULL AFTER product_id');
    }	
	 if (!in_array('is_combo', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'product` ADD `is_combo` tinyint (1) DEFAULT 0 NOT NULL AFTER product_id');
    }	
	 if (!in_array('is_trial', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'product` ADD `is_trial` tinyint (1) DEFAULT 0 NOT NULL AFTER product_id');
    }	
	 if (!in_array('maximum', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'product` ADD `maximum` int (11) DEFAULT 0 NOT NULL AFTER product_id');
    }	
	if (!in_array('recurring_combo', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'product` ADD `recurring_combo` text NOT NULL AFTER product_id');
    }	
	//Update order table with proper field
	 $fields = $this->db->query('SHOW COLUMNS FROM `' . DB_PREFIX . 'order`');
    $columns = $fields->num_rows;
     for ($i = 0; $i < $columns; $i++) {$field_array[] = mysql_field_name($fields, $i);}	 
	 
	
	 if (!in_array('paypal_recurring_combo_total', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_combo_total` decimal (15,4) NOT NULL AFTER order_id');
    }	
	 if (!in_array('paypal_recurring_combo_total', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_combo` text NOT NULL AFTER order_id');
    }	
	 if (!in_array('paypal_recurring_latpaymentamount', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_latpaymentamount` decimal (15,4) NOT NULL AFTER order_id');
    }	
	 if (!in_array('paypal_recurring_subscribername', $field_array)) {
	$result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_subscribername` varchar (50) COLLATE utf8_bin NOT NULL AFTER order_id');
    }	
    if (!in_array('paypal_recurringprofile_id', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurringprofile_id` varchar (14) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }
	
	if (!in_array('paypal_recurring_trial_status', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_trial_status` tinyint(1) unsigned NOT NULL DEFAULT 0 AFTER order_id');
    }
	 if (!in_array('paypal_is_original_order', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_is_original_order` tinyint(1) unsigned NOT NULL DEFAULT 0 AFTER order_id');
    }
     if (!in_array('paypal_recurring_finalpaymentduedate', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_finalpaymentduedate` datetime NOT NULL AFTER order_id');
    }	
	if (!in_array('paypal_recurring_maxfailedpayments', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_maxfailedpayments` smallint (2) unsigned NOT NULL AFTER order_id');
    }
	if (!in_array('paypal_recurring_autobillamount', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_autobillamount` varchar (20) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }	
     if (!in_array('paypal_recurring_desc', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_desc` varchar (100) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }
	if (!in_array('paypal_recurring_status', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD  `paypal_recurring_status` varchar (28) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }	
	if (!in_array('paypal_transaction_id', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD  `paypal_transaction_id` varchar (24) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }	
	  if (!in_array('paypal_recurring_regulartotalbillingcycles', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_regulartotalbillingcycles` int (4) unsigned NOT NULL AFTER order_id');
    }	
     if (!in_array('paypal_recurring_totalbillingcycles', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_totalbillingcycles` int (4) unsigned NOT NULL AFTER order_id');
    }
	if (!in_array('paypal_recurring_regularbillingfrequency', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_regularbillingfrequency` smallint (2) unsigned NOT NULL AFTER order_id');
    }	
	if (!in_array('paypal_recurring_billingfrequency', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_billingfrequency` smallint (2) unsigned NOT NULL AFTER order_id');
    }
	if (!in_array('paypal_recurring_regularbillingperiod', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_regularbillingperiod` varchar (15) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }	
     if (!in_array('paypal_recurring_billingperiod', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_billingperiod` varchar (15) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }
	if (!in_array('paypal_recurring_reference', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD  `paypal_recurring_reference` varchar (25) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }	
	if (!in_array('paypal_recurring_startdate', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD  `paypal_recurring_startdate` datetime NOT NULL AFTER order_id');
    }	
	 if (!in_array('paypal_recurring_cyclescompleted', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_cyclescompleted` int (4) unsigned NOT NULL AFTER order_id');
    }	
     if (!in_array('paypal_recurring_nextbilldate', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_nextbilldate` datetime NOT NULL AFTER order_id');
    }
	if (!in_array('paypal_recurring_regulartaxamount', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_regulartaxamount` decimal (15,4) NOT NULL AFTER order_id');
    }	
	if (!in_array('paypal_recurring_lastpaymentamount', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_lastpaymentamount` decimal (15,4) NOT NULL AFTER order_id');
    }
	if (!in_array('paypal_recurring_taxamount', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_taxamount` decimal (15,4) NOT NULL AFTER order_id');
    }	
     if (!in_array('paypal_recurring_regularshippingamount', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_regularshippingamount` decimal (15,4) NOT NULL AFTER order_id');
    }
	if (!in_array('paypal_recurring_shippingamount', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_shippingamount` decimal (15,4) NOT NULL AFTER order_id');
    }
	if (!in_array('paypal_recurring_amount', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_amount` decimal (15,4) NOT NULL AFTER order_id');
    }		
	if (!in_array('paypal_recurring_regularamount', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_regularamount` decimal (15,4) NOT NULL AFTER order_id');
    }	
	if (!in_array('paypal_recurring_lastpaymentdate', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_lastpaymentdate` datetime NOT NULL AFTER order_id');
    }	
     if (!in_array('paypal_recurring_failedpaymentcount', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_failedpaymentcount` smallint (2) unsigned NOT NULL AFTER order_id');
    }
	if (!in_array('paypal_recurring_outstandingbalance', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_outstandingbalance` decimal (15,4) NOT NULL AFTER order_id');
    }	
	if (!in_array('paypal_recurring_cyclesremaining', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_cyclesremaining` bigint (10) unsigned NOT NULL AFTER order_id');
    }	
	if (!in_array('paypal_recurring_maestrostartdate', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_maestrostartdate` varchar (6) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }	
     if (!in_array('paypal_recurring_ccexpire', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_ccexpire` varchar (6) COLLATE utf8_bin NOT NULL  AFTER order_id');
    }
	if (!in_array('paypal_recurring_ccnumber', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_ccnumber` int (16) unsigned NOT NULL AFTER order_id');
    }	
	if (!in_array('paypal_recurring_cctype', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_cctype` varchar (25) NOT NULL AFTER order_id');
    }	
	 if (!in_array('paypal_recurring_cancelreason', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_cancelreason` text COLLATE utf8_bin NOT NULL AFTER order_id');
    }	
	if (!in_array('paypal_recurring_maestronumber', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_maestronumber` smallint (2) unsigned NOT NULL AFTER order_id');
    }
	if (!in_array('paypal_recurring_count', $field_array)) {
    $result = $this->db->query('ALTER TABLE `' . DB_PREFIX . 'order` ADD `paypal_recurring_count` int (7) unsigned NOT NULL AFTER order_id');
    }

//Misc Fields/Query's
	$query = $this->db->query("SELECT COUNT(*) AS total FROM `" . DB_PREFIX . "order_status` WHERE name = 'Expired' AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
	$check = $query->row['total'];
	if(!$check){
		$this->db->query("INSERT INTO `" . DB_PREFIX . "order_status` SET  language_id = '" . (int)$this->config->get('config_language_id') . "', name = 'Expired'");
	}
	
	$query = $this->db->query("SELECT COUNT(*) AS total FROM `" . DB_PREFIX . "order_status` WHERE name = 'Canceled' AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
	$check = $query->row['total'];
	if(!$check){
		$this->db->query("INSERT INTO `" . DB_PREFIX . "order_status` SET  language_id = '" . (int)$this->config->get('config_language_id') . "', name = 'Canceled'");
	}
	
	$query = $this->db->query("SELECT COUNT(*) AS total FROM `" . DB_PREFIX . "order_status` WHERE name = 'Suspended' AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
	$check = $query->row['total'];
	if(!$check){
		$this->db->query("INSERT INTO `" . DB_PREFIX . "order_status` SET  language_id = '" . (int)$this->config->get('config_language_id') . "', name = 'Suspended'");
	}
	
	$query = $this->db->query("SELECT COUNT(*) AS total FROM `" . DB_PREFIX . "order_status` WHERE name = 'Active' AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
	$check = $query->row['total'];
	if(!$check){
		$this->db->query("INSERT INTO `" . DB_PREFIX . "order_status` SET  language_id = '" . (int)$this->config->get('config_language_id') . "', name = 'Active'");
	}
	
	$query = $this->db->query("SELECT COUNT(*) AS total FROM `" . DB_PREFIX . "order_status` WHERE name = 'Failed' AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
	$check = $query->row['total'];
	if(!$check){
		$this->db->query("INSERT INTO `" . DB_PREFIX . "order_status` SET  language_id = '" . (int)$this->config->get('config_language_id') . "', name = 'Failed'");
	}
	
	//special customer group
	$query = $this->db->query("SELECT COUNT(*) AS total FROM `" . DB_PREFIX . "customer_group_description` WHERE name = 'Recurring' AND language_id = '" . (int)$this->config->get('config_language_id') . "'");
	$check = $query->row['total'];
	if(!$check){
		$this->db->query("INSERT INTO `" . DB_PREFIX . "customer_group` SET  is_recurring = '1',approval = '0',company_id_display = '1',tax_id_display = '0',tax_id_required = '0', sort_order='1'");
		 $customer_group_id = $this->db->getLastId();     
		$this->db->query("INSERT INTO `" . DB_PREFIX . "customer_group_description` SET  customer_group_id = '" . (int)$customer_group_id . "', language_id = '" . (int)$this->config->get('config_language_id') . "', name = 'Recurring' ,description = 'Recurring Payment Group'");
	}
	
       //refresh statuses after making new
			$this->cache->delete('order_status');

			}
			
			   
			    ]]></add>     
	</operation>
	</file>
	
<file name="admin/model/sale/order.php">

			<operation>
            <search position="replace"><![CDATA[
					$sql = "SELECT o.order_id, CONCAT(o.firstname, ' ', o.lastname) AS customer, (SELECT os.name FROM " . DB_PREFIX . "order_status os WHERE os.order_status_id = o.order_status_id AND os.language_id = '" . (int)$this->config->get('config_language_id') . "') AS status, o.total, o.currency_code, o.currency_value, o.date_added, o.date_modified FROM `" . DB_PREFIX . "order` o";


            ]]></search>
			
			  <add trim="true"><![CDATA[  
			
			if($this->config->get('pp_pro_recurring_password')){
		$sql = "SELECT o.order_id,o.paypal_recurringprofile_id, CONCAT(o.firstname, ' ', o.lastname) AS customer, (SELECT os.name FROM " . DB_PREFIX . "order_status os WHERE os.order_status_id = o.order_status_id AND os.language_id = '" . (int)$this->config->get('config_language_id') . "') AS status, o.total, o.currency_code, o.currency_value, o.date_added, o.date_modified FROM `" . DB_PREFIX . "order` o";
		}else{
		$sql = "SELECT o.order_id, CONCAT(o.firstname, ' ', o.lastname) AS customer, (SELECT os.name FROM " . DB_PREFIX . "order_status os WHERE os.order_status_id = o.order_status_id AND os.language_id = '" . (int)$this->config->get('config_language_id') . "') AS status, o.total, o.currency_code, o.currency_value, o.date_added, o.date_modified FROM `" . DB_PREFIX . "order` o";
		}
			
  ]]></add>     
	</operation>
		<operation>
            <search position="before"><![CDATA[
             $sort_data = array(

            ]]></search>
			
			  <add trim="true"><![CDATA[  
		if($this->config->get('pp_pro_recurring_password')){
		$sql .= " AND o.paypal_recurringprofile_id = ''";
		}
			
  ]]></add>     
	</operation>
	
	
</file>

	<file name="catalog/model/checkout/order.php">	
	<operation>
            <search position="before"><![CDATA[
			public function addOrder($data) {
            
            ]]></search>
			
			  <add trim="true"><![CDATA[  
		private function getProducts($products) {
		
		$product_data = array();
		foreach ($products as $product_id) {
		$query = $this->db->query("SELECT DISTINCT * FROM `" . DB_PREFIX . "product` p LEFT JOIN `" . DB_PREFIX . "product_description` pd ON (p.product_id = pd.product_id) WHERE p.product_id = '" . (int)$product_id . "' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "'");
			 
			if ($query) {
				$product_data[] = array(
					'price' => $query->row['price']
				);
			}
		}
		return $product_data;
	}
			   ]]></add>     
	</operation>
<operation>
            <search position="before"><![CDATA[
			foreach ($data['products'] as $product) { 
            
            ]]></search>
			
			  <add trim="true"><![CDATA[  
		$products = $this->cart->getProducts();
		foreach ($products as $product) {
		
        $trial_product_ids = $this->db->query("SELECT product_id FROM `" . DB_PREFIX . "product` WHERE is_trial = '1' AND is_combo = '1'");			
		$ids = array();
		if($trial_product_ids->num_rows){
	    
		foreach($trial_product_ids->rows as $pid){
		$ids[] = $pid['product_id'];
		}
		if(in_array($product['product_id'],$ids)){
		$combo_data = $this->db->query("SELECT recurring_combo, price FROM `" . DB_PREFIX . "product` WHERE  product_id = '".(int)$product['product_id']."'");
		 foreach($combo_data->rows as $value){
			$base_price = $value['price'];	
			$newprice = $this->getProducts(unserialize($value['recurring_combo']));
				
			
			foreach($newprice as $price){
				$base_price += $price['price'];
				
			}
			//Combo Item Total. Trial + Regular
		$this->db->query("UPDATE `" . DB_PREFIX . "order` SET paypal_recurring_combo = '".(string)$value['recurring_combo']."', paypal_recurring_combo_total = '".(float)$base_price."' WHERE  order_id = '".(int)$order_id ."'");
			
		}
        }
        }
		}
			   ]]></add>     
	</operation>
	
	<operation>
            <search position="after"><![CDATA[
			'order_id'                => $order_query->row['order_id'],
            
            ]]></search>
			
			  <add trim="true"><![CDATA[  
			
		'paypal_recurringprofile_id'                => $order_query->row['paypal_recurringprofile_id'],
			   ]]></add>     
	</operation>
	
	
			<operation>
            <search position="before"><![CDATA[
			public function confirm($order_id, $order_status_id, $comment = '', $notify = false) {
            ]]></search>
            <add trim="true"><![CDATA[
			
public function confirmRecurring($new_order_id, $order_status_id, $comment = '', $notify = false, $profileid = '', $trialboolean , $pptransactionid = '', $recurringtype, $order_id) {
		$order_info = $this->getOrder($new_order_id);
		 
		if ($order_info && !$order_info['order_status_id']) {
			// Fraud Detection
			if ($this->config->get('config_fraud_detection')) {
				$this->load->model('checkout/fraud');
				
				$risk_score = $this->model_checkout_fraud->getFraudScore($order_info);
				
				if ($risk_score > $this->config->get('config_fraud_score')) {
					$order_status_id = $this->config->get('config_fraud_status_id');
				}
			}

			// Blacklist
			$status = false;
			
			$this->load->model('account/customer');
			
			if ($order_info['customer_id']) {
				$results = $this->model_account_customer->getIps($order_info['customer_id']);
				
				foreach ($results as $result) {
				      //check for 155 method, id true, call that method instead.
					if (method_exists($this->model_account_customer, 'isBanIp')){
					  if ($this->model_account_customer->isBanIp($result['ip'])) {
					  $status = true;
						
						break;
						}
						
						
						}else{
					if ($this->model_account_customer->isBlacklisted($result['ip'])) {
						$status = true;
						
						break;
					}
					
					}
				}
			} else {
			  //check for 155 method, id true, call that method instead.
				if (method_exists($this->model_account_customer, 'isBanIp')){
				$status = $this->model_account_customer->isBanIp($order_info['ip']);
				}else{
				$status = $this->model_account_customer->isBlacklisted($order_info['ip']);
				}
				
			}
			
			if ($status) {
				$order_status_id = $this->config->get('config_order_status_id');
			}		
				
			$this->db->query("UPDATE `" . DB_PREFIX . "order` SET paypal_transaction_id = '" . (string)$pptransactionid . "',paypal_recurringprofile_id = '" . (string)$profileid . "',order_status_id = '" . (int)$order_status_id . "', date_modified = NOW() WHERE order_id = '" . (int)$new_order_id . "'");

			$this->db->query("INSERT INTO " . DB_PREFIX . "order_history SET order_id = '" . (int)$new_order_id . "', order_status_id = '" . (int)$order_status_id . "', notify = '1', comment = '" . $this->db->escape(($comment && $notify) ? $comment : '') . "', date_added = NOW()");
            $this->db->query("INSERT INTO " . DB_PREFIX . "order_history SET order_id = '" . (int)$order_id . "', order_status_id = '" . (int)$order_status_id . "', notify = '1', comment = '" . $this->db->escape(($comment && $notify) ? $comment : '') . "', date_added = NOW()");

			$order_product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$new_order_id . "'");
			
			foreach ($order_product_query->rows as $order_product) {
				$this->db->query("UPDATE " . DB_PREFIX . "product SET quantity = (quantity - " . (int)$order_product['quantity'] . ") WHERE product_id = '" . (int)$order_product['product_id'] . "' AND subtract = '1'");
				
				$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$new_order_id . "' AND order_product_id = '" . (int)$order_product['order_product_id'] . "'");
			
				foreach ($order_option_query->rows as $option) {
					$this->db->query("UPDATE " . DB_PREFIX . "product_option_value SET quantity = (quantity - " . (int)$order_product['quantity'] . ") WHERE product_option_value_id = '" . (int)$option['product_option_value_id'] . "' AND subtract = '1'");
				}
			}
			
			$this->cache->delete('product');
			
			// Downloads
			$order_download_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_download WHERE order_id = '" . (int)$new_order_id . "'");
			
			// Gift Voucher
			$this->load->model('checkout/voucher');
			
			$order_voucher_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_voucher WHERE order_id = '" . (int)$new_order_id . "'");
			
			foreach ($order_voucher_query->rows as $order_voucher) {
				$voucher_id = $this->model_checkout_voucher->addVoucher($new_order_id, $order_voucher);
				
				$this->db->query("UPDATE " . DB_PREFIX . "order_voucher SET voucher_id = '" . (int)$voucher_id . "' WHERE order_voucher_id = '" . (int)$order_voucher['order_voucher_id'] . "'");
			}			
			
			// Send out any gift voucher mails
			if ($this->config->get('config_complete_status_id') == $order_status_id) {
				$this->model_checkout_voucher->confirm($new_order_id);
			}
					
			// Order Totals			
			$order_total_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_total` WHERE order_id = '" . (int)$new_order_id . "' ORDER BY sort_order ASC");
			
			foreach ($order_total_query->rows as $order_total) {
				$this->load->model('total/' . $order_total['code']);
				
				if (method_exists($this->{'model_total_' . $order_total['code']}, 'confirm')) {
					$this->{'model_total_' . $order_total['code']}->confirm($order_info, $order_total);
				}
			}
			
			// Send out order confirmation mail
			$language = new Language($order_info['language_directory']);
			$language->load($order_info['language_filename']);
			$language->load('mail/order');
		 
			$order_status_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_status WHERE order_status_id = '" . (int)$order_status_id . "' AND language_id = '" . (int)$order_info['language_id'] . "'");
			
			if ($order_status_query->num_rows) {
				$order_status = $order_status_query->row['name'];	
			} else {
				$order_status = '';
			}
			
			$subject = sprintf($language->get('text_new_subject'), $order_info['store_name'], $new_order_id);
		
			// HTML Mail
			$template = new Template();
			
			$template->data['title'] = sprintf($language->get('text_new_subject'), html_entity_decode($order_info['store_name'], ENT_QUOTES, 'UTF-8'), $new_order_id);
			
			$template->data['text_greeting'] = sprintf($language->get('text_new_greeting'), html_entity_decode($order_info['store_name'], ENT_QUOTES, 'UTF-8'));
			if($recurringtype == "1"){
			
			 if($this->config->get('entry_email_confirm1_enable') == "1" && $this->config->get('email_confirm1')){
			$template->data['text_custom_message'] = html_entity_decode($this->config->get('email_confirm1'), ENT_QUOTES, 'UTF-8');
			}else{
			$template->data['text_custom_message'] = "";	
			}
			
			if($this->config->get('email_template_logo_1')){
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('email_template_logo_1');
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('email_template_logo_1');	
			}
			}else{
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('config_logo');	
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('config_logo');
			}	
			}
				
			}else if($recurringtype == "2"){
			
			 if($this->config->get('entry_email_confirm2_enable') == "1" && $this->config->get('email_confirm2')){
			$template->data['text_custom_message'] = html_entity_decode($this->config->get('email_confirm2'), ENT_QUOTES, 'UTF-8');
			}else{
			$template->data['text_custom_message'] = "";	
			}
		
			if($this->config->get('email_template_logo_2')){
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('email_template_logo_2');
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('email_template_logo_2');	
			}
			}else{
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('config_logo');	
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('config_logo');
			}	
			}
				
			}else if($recurringtype == "3"){
			
			 if($this->config->get('entry_email_confirm3_enable') == "1" && $this->config->get('email_confirm3')){
			$template->data['text_custom_message'] = html_entity_decode($this->config->get('email_confirm3'), ENT_QUOTES, 'UTF-8');
			}else{
			$template->data['text_custom_message'] = "";	
			}
			if($this->config->get('email_template_logo_3')){
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('email_template_logo_3');
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('email_template_logo_3');	
			}
			}else{
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('config_logo');	
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('config_logo');
			}	
			}
				
			}else{
			$template->data['text_custom_message'] = "";
			
			}
			$template->data['text_link'] = $language->get('text_new_link');
			$template->data['text_download'] = $language->get('text_new_download');
			$template->data['text_order_detail'] = $language->get('text_new_order_detail');
			$template->data['text_instruction'] = $language->get('text_new_instruction');
			$template->data['text_order_id'] = $language->get('text_new_order_id');
			$template->data['text_date_added'] = $language->get('text_new_date_added');
			$template->data['text_payment_method'] = $language->get('text_new_payment_method');	
			$template->data['text_shipping_method'] = $language->get('text_new_shipping_method');
			$template->data['text_email'] = $language->get('text_new_email');
			$template->data['text_telephone'] = $language->get('text_new_telephone');
			$template->data['text_ip'] = $language->get('text_new_ip');
			$template->data['text_payment_address'] = $language->get('text_new_payment_address');
			$template->data['text_shipping_address'] = $language->get('text_new_shipping_address');
			$template->data['text_product'] = $language->get('text_new_product');
			$template->data['text_model'] = $language->get('text_new_model');
			$template->data['text_quantity'] = $language->get('text_new_quantity');
			$template->data['text_price'] = $language->get('text_new_price');
			$template->data['text_total'] = $language->get('text_new_total');
			$template->data['text_footer'] = $language->get('text_new_footer');
			$template->data['text_powered'] = $language->get('text_new_powered');
			
			$template->data['store_name'] = $order_info['store_name'];
			$template->data['store_url'] = $order_info['store_url'];
			$template->data['customer_id'] = $order_info['customer_id'];
			$template->data['link'] = $order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $new_order_id;
			
			if ($order_download_query->num_rows) {
				$template->data['download'] = $order_info['store_url'] . 'index.php?route=account/download';
			} else {
				$template->data['download'] = '';
			}
			
			$template->data['order_id'] = $new_order_id;
			$template->data['profile_id'] = $profileid;
			$template->data['text_profile_id'] = $language->get('text_profile_id');
			$template->data['date_added'] = date($language->get('date_format_short'), strtotime($order_info['date_added']));    	
			$template->data['payment_method'] = $order_info['payment_method'];
			$template->data['shipping_method'] = $order_info['shipping_method'];
			$template->data['email'] = $order_info['email'];
			$template->data['telephone'] = $order_info['telephone'];
			$template->data['ip'] = $order_info['ip'];
			
			if ($comment && $notify) {
				$template->data['comment'] = nl2br($comment);
			} else {
				$template->data['comment'] = '';
			}
						
			if ($order_info['payment_address_format']) {
				$format = $order_info['payment_address_format'];
			} else {
				$format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{address_1}' . "\n" . '{address_2}' . "\n" . '{city} {postcode}' . "\n" . '{zone}' . "\n" . '{country}';
			}
			
			$find = array(
				'{firstname}',
				'{lastname}',
				'{company}',
				'{address_1}',
				'{address_2}',
				'{city}',
				'{postcode}',
				'{zone}',
				'{zone_code}',
				'{country}'
			);
		
			$replace = array(
				'firstname' => $order_info['payment_firstname'],
				'lastname'  => $order_info['payment_lastname'],
				'company'   => $order_info['payment_company'],
				'address_1' => $order_info['payment_address_1'],
				'address_2' => $order_info['payment_address_2'],
				'city'      => $order_info['payment_city'],
				'postcode'  => $order_info['payment_postcode'],
				'zone'      => $order_info['payment_zone'],
				'zone_code' => $order_info['payment_zone_code'],
				'country'   => $order_info['payment_country']  
			);
		
			$template->data['payment_address'] = str_replace(array("\r\n", "\r", "\n"), '<br />', preg_replace(array("/\s\s+/", "/\r\r+/", "/\n\n+/"), '<br />', trim(str_replace($find, $replace, $format))));						
									
			if ($order_info['shipping_address_format']) {
				$format = $order_info['shipping_address_format'];
			} else {
				$format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{address_1}' . "\n" . '{address_2}' . "\n" . '{city} {postcode}' . "\n" . '{zone}' . "\n" . '{country}';
			}
			
			$find = array(
				'{firstname}',
				'{lastname}',
				'{company}',
				'{address_1}',
				'{address_2}',
				'{city}',
				'{postcode}',
				'{zone}',
				'{zone_code}',
				'{country}'
			);
		
			$replace = array(
				'firstname' => $order_info['shipping_firstname'],
				'lastname'  => $order_info['shipping_lastname'],
				'company'   => $order_info['shipping_company'],
				'address_1' => $order_info['shipping_address_1'],
				'address_2' => $order_info['shipping_address_2'],
				'city'      => $order_info['shipping_city'],
				'postcode'  => $order_info['shipping_postcode'],
				'zone'      => $order_info['shipping_zone'],
				'zone_code' => $order_info['shipping_zone_code'],
				'country'   => $order_info['shipping_country']  
			);
		
			$template->data['shipping_address'] = str_replace(array("\r\n", "\r", "\n"), '<br />', preg_replace(array("/\s\s+/", "/\r\r+/", "/\n\n+/"), '<br />', trim(str_replace($find, $replace, $format))));
			
			// Products
			$template->data['products'] = array();
				
			foreach ($order_product_query->rows as $product) {
				$option_data = array();
				
				$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$new_order_id . "' AND order_product_id = '" . (int)$product['order_product_id'] . "'");
				
				foreach ($order_option_query->rows as $option) {
					if ($option['type'] != 'file') {
						$value = $option['value'];
					} else {
						$value = utf8_substr($option['value'], 0, utf8_strrpos($option['value'], '.'));
					}
					
					$option_data[] = array(
						'name'  => $option['name'],
						'value' => (utf8_strlen($value) > 20 ? utf8_substr($value, 0, 20) . '..' : $value)
					);					
				}
			  
				$template->data['products'][] = array(
					'name'     => $product['name'],
					'model'    => $product['model'],
					'option'   => $option_data,
					'quantity' => $product['quantity'],
					'price'    => $this->currency->format($product['price'] + ($this->config->get('config_tax') ? $product['tax'] : 0), $order_info['currency_code'], $order_info['currency_value']),
					'total'    => $this->currency->format($product['total'] + ($this->config->get('config_tax') ? ($product['tax'] * $product['quantity']) : 0), $order_info['currency_code'], $order_info['currency_value'])
				);
			}
	
			// Vouchers
			$template->data['vouchers'] = array();
			
			foreach ($order_voucher_query->rows as $voucher) {
				$template->data['vouchers'][] = array(
					'description' => $voucher['description'],
					'amount'      => $this->currency->format($voucher['amount'], $order_info['currency_code'], $order_info['currency_value']),
				);
			}
	
			$template->data['totals'] = $order_total_query->rows;
			
			if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/mail/recurringorder.tpl')) {
				$html = $template->fetch($this->config->get('config_template') . '/template/mail/recurringorder.tpl');
			} else {
				$html = $template->fetch('default/template/mail/recurringorder.tpl');
			}
			
			// Text Mail
			$text  = sprintf($language->get('text_new_greeting'), html_entity_decode($order_info['store_name'], ENT_QUOTES, 'UTF-8')) . "\n\n";
			$text .= $language->get('text_new_order_id') . ' ' . $new_order_id . "\n";
			$text .= $language->get('text_new_date_added') . ' ' . date($language->get('date_format_short'), strtotime($order_info['date_added'])) . "\n";
			$text .= $language->get('text_new_order_status') . ' ' . $order_status . "\n\n";
			
			if ($comment && $notify) {
				$text .= $language->get('text_new_instruction') . "\n\n";
				$text .= $comment . "\n\n";
			}
			
			// Products
			$text .= $language->get('text_new_products') . "\n";
			
			foreach ($order_product_query->rows as $product) {
				$text .= $product['quantity'] . 'x ' . $product['name'] . ' (' . $product['model'] . ') ' . html_entity_decode($this->currency->format($product['total'] + ($this->config->get('config_tax') ? ($product['tax'] * $product['quantity']) : 0), $order_info['currency_code'], $order_info['currency_value']), ENT_NOQUOTES, 'UTF-8') . "\n";
				
				$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$new_order_id . "' AND order_product_id = '" . $product['order_product_id'] . "'");
				
				foreach ($order_option_query->rows as $option) {
					$text .= chr(9) . '-' . $option['name'] . ' ' . (utf8_strlen($option['value']) > 20 ? utf8_substr($option['value'], 0, 20) . '..' : $option['value']) . "\n";
				}
			}
			
			foreach ($order_voucher_query->rows as $voucher) {
				$text .= '1x ' . $voucher['description'] . ' ' . $this->currency->format($voucher['amount'], $order_info['currency_code'], $order_info['currency_value']);
			}
						
			$text .= "\n";
			
			$text .= $language->get('text_new_order_total') . "\n";
			
			foreach ($order_total_query->rows as $total) {
				$text .= $total['title'] . ': ' . html_entity_decode($total['text'], ENT_NOQUOTES, 'UTF-8') . "\n";
			}			
			
			$text .= "\n";
			
			if ($order_info['customer_id']) {
				$text .= $language->get('text_new_link') . "\n";
				$text .= $order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $new_order_id . "\n\n";
			}
		
			if ($order_download_query->num_rows) {
				$text .= $language->get('text_new_download') . "\n";
				$text .= $order_info['store_url'] . 'index.php?route=account/download' . "\n\n";
			}
			
			if ($order_info['comment']) {
				$text .= $language->get('text_new_comment') . "\n\n";
				$text .= $order_info['comment'] . "\n\n";
			}
			
			$text .= $language->get('text_new_footer') . "\n\n";
		     
			$mail = new Mail(); 
			$mail->protocol = $this->config->get('config_mail_protocol');
			$mail->parameter = $this->config->get('config_mail_parameter');
			$mail->hostname = $this->config->get('config_smtp_host');
			$mail->username = $this->config->get('config_smtp_username');
			$mail->password = $this->config->get('config_smtp_password');
			$mail->port = $this->config->get('config_smtp_port');
			$mail->timeout = $this->config->get('config_smtp_timeout');			
			$mail->setTo($order_info['email']);
			$mail->setFrom($this->config->get('config_email'));
			$mail->setSender($order_info['store_name']);
			$mail->setSubject(html_entity_decode($subject, ENT_QUOTES, 'UTF-8'));
			$mail->setHtml($html);
			$mail->setText(html_entity_decode($text, ENT_QUOTES, 'UTF-8'));
			$mail->send();
             //updateRecurringProfile
             $this->updateRecurringProfile($profileid,$trialboolean,$new_order_id,$pptransactionid, $order_id);
			// Admin Alert Mail
			if ($this->config->get('config_alert_mail')) {
				$subject = sprintf($language->get('text_new_subject'), html_entity_decode($this->config->get('config_name'), ENT_QUOTES, 'UTF-8'), $new_order_id);
				
				// Text 
				$text  = $language->get('text_new_received') . "\n\n";
				$text .= $language->get('text_new_order_id') . ' ' . $new_order_id . "\n";
				$text .= $language->get('text_new_date_added') . ' ' . date($language->get('date_format_short'), strtotime($order_info['date_added'])) . "\n";
				$text .= $language->get('text_new_order_status') . ' ' . $order_status . "\n\n";
				$text .= $language->get('text_new_products') . "\n";
				
				foreach ($order_product_query->rows as $product) {
					$text .= $product['quantity'] . 'x ' . $product['name'] . ' (' . $product['model'] . ') ' . html_entity_decode($this->currency->format($product['total'] + ($this->config->get('config_tax') ? ($product['tax'] * $product['quantity']) : 0), $order_info['currency_code'], $order_info['currency_value']), ENT_NOQUOTES, 'UTF-8') . "\n";
					
					$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$new_order_id . "' AND order_product_id = '" . $product['order_product_id'] . "'");
					
					foreach ($order_option_query->rows as $option) {
						if ($option['type'] != 'file') {
							$value = $option['value'];
						} else {
							$value = utf8_substr($option['value'], 0, utf8_strrpos($option['value'], '.'));
						}
											
						$text .= chr(9) . '-' . $option['name'] . ' ' . (utf8_strlen($value) > 20 ? utf8_substr($value, 0, 20) . '..' : $value) . "\n";
					}
				}
				
				foreach ($order_voucher_query->rows as $voucher) {
					$text .= '1x ' . $voucher['description'] . ' ' . $this->currency->format($voucher['amount'], $order_info['currency_code'], $order_info['currency_value']);
				}
							
				$text .= "\n";

				$text .= $language->get('text_new_order_total') . "\n";
				
				foreach ($order_total_query->rows as $total) {
					$text .= $total['title'] . ': ' . html_entity_decode($total['text'], ENT_NOQUOTES, 'UTF-8') . "\n";
				}			
				
				$text .= "\n";
				
				if ($order_info['comment']) {
					$text .= $language->get('text_new_comment') . "\n\n";
					$text .= $order_info['comment'] . "\n\n";
				}
			
				$mail = new Mail(); 
				$mail->protocol = $this->config->get('config_mail_protocol');
				$mail->parameter = $this->config->get('config_mail_parameter');
				$mail->hostname = $this->config->get('config_smtp_host');
				$mail->username = $this->config->get('config_smtp_username');
				$mail->password = $this->config->get('config_smtp_password');
				$mail->port = $this->config->get('config_smtp_port');
				$mail->timeout = $this->config->get('config_smtp_timeout');
				$mail->setTo($this->config->get('config_email'));
				$mail->setFrom($this->config->get('config_email'));
				$mail->setSender($order_info['store_name']);
				$mail->setSubject(html_entity_decode($subject, ENT_QUOTES, 'UTF-8'));
				$mail->setText(html_entity_decode($text, ENT_QUOTES, 'UTF-8'));
				$mail->send();
				
				// Send to additional alert emails
				$emails = explode(',', $this->config->get('config_alert_emails'));
				
				foreach ($emails as $email) {
					if ($email && preg_match('/^[^\@]+@.*\.[a-z]{2,6}$/i', $email)) {
						$mail->setTo($email);
						$mail->send();
					}
				}				
			}		
		}
	}

public function confirmRecurringNew($new_order_id, $order_status_id, $comment = '', $notify = false, $profileid = '', $trialboolean , $pptransactionid = '', $recurringtype) {
		$order_info = $this->getOrder($new_order_id);
		 
		if ($order_info && !$order_info['order_status_id']) {
			// Fraud Detection
			if ($this->config->get('config_fraud_detection')) {
				$this->load->model('checkout/fraud');
				
				$risk_score = $this->model_checkout_fraud->getFraudScore($order_info);
				
				if ($risk_score > $this->config->get('config_fraud_score')) {
					$order_status_id = $this->config->get('config_fraud_status_id');
				}
			}

			// Blacklist
			$status = false;
			
			$this->load->model('account/customer');
			
			if ($order_info['customer_id']) {
				$results = $this->model_account_customer->getIps($order_info['customer_id']);
				
				foreach ($results as $result) {
				      //check for 155 method, id true, call that method instead.
					if (method_exists($this->model_account_customer, 'isBanIp')){
					  if ($this->model_account_customer->isBanIp($result['ip'])) {
					  $status = true;
						
						break;
						}
						
						
						}else{
					if ($this->model_account_customer->isBlacklisted($result['ip'])) {
						$status = true;
						
						break;
					}
					
					}
				}
			} else {
			  //check for 155 method, id true, call that method instead.
				if (method_exists($this->model_account_customer, 'isBanIp')){
				$status = $this->model_account_customer->isBanIp($order_info['ip']);
				}else{
				$status = $this->model_account_customer->isBlacklisted($order_info['ip']);
				}
				
			}
			
			if ($status) {
				$order_status_id = $this->config->get('config_order_status_id');
			}		
				//Insert combo items and total if any
				
				//
			$this->db->query("UPDATE `" . DB_PREFIX . "order` SET paypal_transaction_id = '" . (string)$pptransactionid . "',paypal_recurringprofile_id = '" . (string)$profileid . "',order_status_id = '" . (int)$order_status_id . "', date_modified = NOW() WHERE order_id = '" . (int)$new_order_id . "'");

			$this->db->query("INSERT INTO " . DB_PREFIX . "order_history SET order_id = '" . (int)$new_order_id . "', order_status_id = '" . (int)$order_status_id . "', notify = '1', comment = '" . $this->db->escape(($comment && $notify) ? $comment : '') . "', date_added = NOW()");

			$order_product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$new_order_id . "'");
			
			foreach ($order_product_query->rows as $order_product) {
				$this->db->query("UPDATE " . DB_PREFIX . "product SET quantity = (quantity - " . (int)$order_product['quantity'] . ") WHERE product_id = '" . (int)$order_product['product_id'] . "' AND subtract = '1'");
				
				$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$new_order_id . "' AND order_product_id = '" . (int)$order_product['order_product_id'] . "'");
			
				foreach ($order_option_query->rows as $option) {
					$this->db->query("UPDATE " . DB_PREFIX . "product_option_value SET quantity = (quantity - " . (int)$order_product['quantity'] . ") WHERE product_option_value_id = '" . (int)$option['product_option_value_id'] . "' AND subtract = '1'");
				}
			}
			
			$this->cache->delete('product');
			
			// Downloads
			$order_download_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_download WHERE order_id = '" . (int)$new_order_id . "'");
			
			// Gift Voucher
			$this->load->model('checkout/voucher');
			
			$order_voucher_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_voucher WHERE order_id = '" . (int)$new_order_id . "'");
			
			foreach ($order_voucher_query->rows as $order_voucher) {
				$voucher_id = $this->model_checkout_voucher->addVoucher($new_order_id, $order_voucher);
				
				$this->db->query("UPDATE " . DB_PREFIX . "order_voucher SET voucher_id = '" . (int)$voucher_id . "' WHERE order_voucher_id = '" . (int)$order_voucher['order_voucher_id'] . "'");
			}			
			
			// Send out any gift voucher mails
			if ($this->config->get('config_complete_status_id') == $order_status_id) {
				$this->model_checkout_voucher->confirm($new_order_id);
			}
					
			// Order Totals			
			$order_total_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_total` WHERE order_id = '" . (int)$new_order_id . "' ORDER BY sort_order ASC");
			
			foreach ($order_total_query->rows as $order_total) {
				$this->load->model('total/' . $order_total['code']);
				
				if (method_exists($this->{'model_total_' . $order_total['code']}, 'confirm')) {
					$this->{'model_total_' . $order_total['code']}->confirm($order_info, $order_total);
				}
			}
			
			// Send out order confirmation mail
			$language = new Language($order_info['language_directory']);
			$language->load($order_info['language_filename']);
			$language->load('mail/order');
		 
			$order_status_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_status WHERE order_status_id = '" . (int)$order_status_id . "' AND language_id = '" . (int)$order_info['language_id'] . "'");
			
			if ($order_status_query->num_rows) {
				$order_status = $order_status_query->row['name'];	
			} else {
				$order_status = '';
			}
			
			$subject = sprintf($language->get('text_new_subject'), $order_info['store_name'], $new_order_id);
		
			// HTML Mail
			$template = new Template();
			
			$template->data['title'] = sprintf($language->get('text_new_subject'), html_entity_decode($order_info['store_name'], ENT_QUOTES, 'UTF-8'), $new_order_id);
			
			$template->data['text_greeting'] = sprintf($language->get('text_new_greeting'), html_entity_decode($order_info['store_name'], ENT_QUOTES, 'UTF-8'));
			if($recurringtype == "1"){
			
			 if($this->config->get('entry_email_confirm1_enable') == "1" && $this->config->get('email_confirm1')){
			$template->data['text_custom_message'] = html_entity_decode($this->config->get('email_confirm1'), ENT_QUOTES, 'UTF-8');
			}else{
			$template->data['text_custom_message'] = "";	
			}
			
			if($this->config->get('email_template_logo_1')){
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('email_template_logo_1');
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('email_template_logo_1');	
			}
			}else{
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('config_logo');	
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('config_logo');
			}	
			}
				
			}else if($recurringtype == "2"){
			
			 if($this->config->get('entry_email_confirm2_enable') == "1" && $this->config->get('email_confirm2')){
			$template->data['text_custom_message'] = html_entity_decode($this->config->get('email_confirm2'), ENT_QUOTES, 'UTF-8');
			}else{
			$template->data['text_custom_message'] = "";	
			}
		
			if($this->config->get('email_template_logo_2')){
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('email_template_logo_2');
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('email_template_logo_2');	
			}
			}else{
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('config_logo');	
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('config_logo');
			}	
			}
				
			}else if($recurringtype == "3"){
			
			 if($this->config->get('entry_email_confirm3_enable') == "1" && $this->config->get('email_confirm3')){
			$template->data['text_custom_message'] = html_entity_decode($this->config->get('email_confirm3'), ENT_QUOTES, 'UTF-8');
			}else{
			$template->data['text_custom_message'] = "";	
			}
			if($this->config->get('email_template_logo_3')){
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('email_template_logo_3');
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('email_template_logo_3');	
			}
			}else{
			if(!defined('HTTP_IMAGE')){
			$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('config_logo');	
			}else{
			$template->data['logo'] = HTTP_IMAGE . $this->config->get('config_logo');
			}	
			}
				
			}else{
			$template->data['text_custom_message'] = "";
			
			}
			$template->data['text_link'] = $language->get('text_new_link');
			$template->data['text_download'] = $language->get('text_new_download');
			$template->data['text_order_detail'] = $language->get('text_new_order_detail');
			$template->data['text_instruction'] = $language->get('text_new_instruction');
			$template->data['text_order_id'] = $language->get('text_new_order_id');
			$template->data['text_date_added'] = $language->get('text_new_date_added');
			$template->data['text_payment_method'] = $language->get('text_new_payment_method');	
			$template->data['text_shipping_method'] = $language->get('text_new_shipping_method');
			$template->data['text_email'] = $language->get('text_new_email');
			$template->data['text_telephone'] = $language->get('text_new_telephone');
			$template->data['text_ip'] = $language->get('text_new_ip');
			$template->data['text_payment_address'] = $language->get('text_new_payment_address');
			$template->data['text_shipping_address'] = $language->get('text_new_shipping_address');
			$template->data['text_product'] = $language->get('text_new_product');
			$template->data['text_model'] = $language->get('text_new_model');
			$template->data['text_quantity'] = $language->get('text_new_quantity');
			$template->data['text_price'] = $language->get('text_new_price');
			$template->data['text_total'] = $language->get('text_new_total');
			$template->data['text_footer'] = $language->get('text_new_footer');
			$template->data['text_powered'] = $language->get('text_new_powered');
			
			$template->data['store_name'] = $order_info['store_name'];
			$template->data['store_url'] = $order_info['store_url'];
			$template->data['customer_id'] = $order_info['customer_id'];
			$template->data['link'] = $order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $new_order_id;
			
			if ($order_download_query->num_rows) {
				$template->data['download'] = $order_info['store_url'] . 'index.php?route=account/download';
			} else {
				$template->data['download'] = '';
			}
			
			$template->data['order_id'] = $new_order_id;
		    $template->data['profile_id'] = $profileid;
			$template->data['text_profile_id'] = $language->get('text_profile_id');
			$template->data['date_added'] = date($language->get('date_format_short'), strtotime($order_info['date_added']));    	
			$template->data['payment_method'] = $order_info['payment_method'];
			$template->data['shipping_method'] = $order_info['shipping_method'];
			$template->data['email'] = $order_info['email'];
			$template->data['telephone'] = $order_info['telephone'];
			$template->data['ip'] = $order_info['ip'];
			
			if ($comment && $notify) {
				$template->data['comment'] = nl2br($comment);
			} else {
				$template->data['comment'] = '';
			}
						
			if ($order_info['payment_address_format']) {
				$format = $order_info['payment_address_format'];
			} else {
				$format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{address_1}' . "\n" . '{address_2}' . "\n" . '{city} {postcode}' . "\n" . '{zone}' . "\n" . '{country}';
			}
			
			$find = array(
				'{firstname}',
				'{lastname}',
				'{company}',
				'{address_1}',
				'{address_2}',
				'{city}',
				'{postcode}',
				'{zone}',
				'{zone_code}',
				'{country}'
			);
		
			$replace = array(
				'firstname' => $order_info['payment_firstname'],
				'lastname'  => $order_info['payment_lastname'],
				'company'   => $order_info['payment_company'],
				'address_1' => $order_info['payment_address_1'],
				'address_2' => $order_info['payment_address_2'],
				'city'      => $order_info['payment_city'],
				'postcode'  => $order_info['payment_postcode'],
				'zone'      => $order_info['payment_zone'],
				'zone_code' => $order_info['payment_zone_code'],
				'country'   => $order_info['payment_country']  
			);
		
			$template->data['payment_address'] = str_replace(array("\r\n", "\r", "\n"), '<br />', preg_replace(array("/\s\s+/", "/\r\r+/", "/\n\n+/"), '<br />', trim(str_replace($find, $replace, $format))));						
									
			if ($order_info['shipping_address_format']) {
				$format = $order_info['shipping_address_format'];
			} else {
				$format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{address_1}' . "\n" . '{address_2}' . "\n" . '{city} {postcode}' . "\n" . '{zone}' . "\n" . '{country}';
			}
			
			$find = array(
				'{firstname}',
				'{lastname}',
				'{company}',
				'{address_1}',
				'{address_2}',
				'{city}',
				'{postcode}',
				'{zone}',
				'{zone_code}',
				'{country}'
			);
		
			$replace = array(
				'firstname' => $order_info['shipping_firstname'],
				'lastname'  => $order_info['shipping_lastname'],
				'company'   => $order_info['shipping_company'],
				'address_1' => $order_info['shipping_address_1'],
				'address_2' => $order_info['shipping_address_2'],
				'city'      => $order_info['shipping_city'],
				'postcode'  => $order_info['shipping_postcode'],
				'zone'      => $order_info['shipping_zone'],
				'zone_code' => $order_info['shipping_zone_code'],
				'country'   => $order_info['shipping_country']  
			);
		
			$template->data['shipping_address'] = str_replace(array("\r\n", "\r", "\n"), '<br />', preg_replace(array("/\s\s+/", "/\r\r+/", "/\n\n+/"), '<br />', trim(str_replace($find, $replace, $format))));
			
			// Products
			$template->data['products'] = array();
				
			foreach ($order_product_query->rows as $product) {
				$option_data = array();
				
				$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$new_order_id . "' AND order_product_id = '" . (int)$product['order_product_id'] . "'");
				
				foreach ($order_option_query->rows as $option) {
					if ($option['type'] != 'file') {
						$value = $option['value'];
					} else {
						$value = utf8_substr($option['value'], 0, utf8_strrpos($option['value'], '.'));
					}
					
					$option_data[] = array(
						'name'  => $option['name'],
						'value' => (utf8_strlen($value) > 20 ? utf8_substr($value, 0, 20) . '..' : $value)
					);					
				}
			  
				$template->data['products'][] = array(
					'name'     => $product['name'],
					'model'    => $product['model'],
					'option'   => $option_data,
					'quantity' => $product['quantity'],
					'price'    => $this->currency->format($product['price'] + ($this->config->get('config_tax') ? $product['tax'] : 0), $order_info['currency_code'], $order_info['currency_value']),
					'total'    => $this->currency->format($product['total'] + ($this->config->get('config_tax') ? ($product['tax'] * $product['quantity']) : 0), $order_info['currency_code'], $order_info['currency_value'])
				);
			}
	
			// Vouchers
			$template->data['vouchers'] = array();
			
			foreach ($order_voucher_query->rows as $voucher) {
				$template->data['vouchers'][] = array(
					'description' => $voucher['description'],
					'amount'      => $this->currency->format($voucher['amount'], $order_info['currency_code'], $order_info['currency_value']),
				);
			}
	
			$template->data['totals'] = $order_total_query->rows;
			
			if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/mail/recurringorder.tpl')) {
				$html = $template->fetch($this->config->get('config_template') . '/template/mail/recurringorder.tpl');
			} else {
				$html = $template->fetch('default/template/mail/recurringorder.tpl');
			}
			
			// Text Mail
			$text  = sprintf($language->get('text_new_greeting'), html_entity_decode($order_info['store_name'], ENT_QUOTES, 'UTF-8')) . "\n\n";
			$text .= $language->get('text_new_order_id') . ' ' . $new_order_id . "\n";
			$text .= $language->get('text_new_date_added') . ' ' . date($language->get('date_format_short'), strtotime($order_info['date_added'])) . "\n";
			$text .= $language->get('text_new_order_status') . ' ' . $order_status . "\n\n";
			
			if ($comment && $notify) {
				$text .= $language->get('text_new_instruction') . "\n\n";
				$text .= $comment . "\n\n";
			}
			
			// Products
			$text .= $language->get('text_new_products') . "\n";
			
			foreach ($order_product_query->rows as $product) {
				$text .= $product['quantity'] . 'x ' . $product['name'] . ' (' . $product['model'] . ') ' . html_entity_decode($this->currency->format($product['total'] + ($this->config->get('config_tax') ? ($product['tax'] * $product['quantity']) : 0), $order_info['currency_code'], $order_info['currency_value']), ENT_NOQUOTES, 'UTF-8') . "\n";
				
				$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$new_order_id . "' AND order_product_id = '" . $product['order_product_id'] . "'");
				
				foreach ($order_option_query->rows as $option) {
					$text .= chr(9) . '-' . $option['name'] . ' ' . (utf8_strlen($option['value']) > 20 ? utf8_substr($option['value'], 0, 20) . '..' : $option['value']) . "\n";
				}
			}
			
			foreach ($order_voucher_query->rows as $voucher) {
				$text .= '1x ' . $voucher['description'] . ' ' . $this->currency->format($voucher['amount'], $order_info['currency_code'], $order_info['currency_value']);
			}
						
			$text .= "\n";
			
			$text .= $language->get('text_new_order_total') . "\n";
			
			foreach ($order_total_query->rows as $total) {
				$text .= $total['title'] . ': ' . html_entity_decode($total['text'], ENT_NOQUOTES, 'UTF-8') . "\n";
			}			
			
			$text .= "\n";
			
			if ($order_info['customer_id']) {
				$text .= $language->get('text_new_link') . "\n";
				$text .= $order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $new_order_id . "\n\n";
			}
		
			if ($order_download_query->num_rows) {
				$text .= $language->get('text_new_download') . "\n";
				$text .= $order_info['store_url'] . 'index.php?route=account/download' . "\n\n";
			}
			
			if ($order_info['comment']) {
				$text .= $language->get('text_new_comment') . "\n\n";
				$text .= $order_info['comment'] . "\n\n";
			}
			
			$text .= $language->get('text_new_footer') . "\n\n";
		     
			$mail = new Mail(); 
			$mail->protocol = $this->config->get('config_mail_protocol');
			$mail->parameter = $this->config->get('config_mail_parameter');
			$mail->hostname = $this->config->get('config_smtp_host');
			$mail->username = $this->config->get('config_smtp_username');
			$mail->password = $this->config->get('config_smtp_password');
			$mail->port = $this->config->get('config_smtp_port');
			$mail->timeout = $this->config->get('config_smtp_timeout');			
			$mail->setTo($order_info['email']);
			$mail->setFrom($this->config->get('config_email'));
			$mail->setSender($order_info['store_name']);
			$mail->setSubject(html_entity_decode($subject, ENT_QUOTES, 'UTF-8'));
			$mail->setHtml($html);
			$mail->setText(html_entity_decode($text, ENT_QUOTES, 'UTF-8'));
			$mail->send();
             //updateRecurringProfile
             $this->updateRecurringProfileNew($profileid,$trialboolean,$new_order_id,$pptransactionid);
			// Admin Alert Mail
			if ($this->config->get('config_alert_mail')) {
				$subject = sprintf($language->get('text_new_subject'), html_entity_decode($this->config->get('config_name'), ENT_QUOTES, 'UTF-8'), $new_order_id);
				
				// Text 
				$text  = $language->get('text_new_received') . "\n\n";
				$text .= $language->get('text_new_order_id') . ' ' . $new_order_id . "\n\n";
				$text .= 'Recurring Profile ID:' . ' ' .  $profileid . "\n\n";
				$text .= $language->get('text_new_date_added') . ' ' . date($language->get('date_format_short'), strtotime($order_info['date_added'])) . "\n";
				$text .= $language->get('text_new_order_status') . ' ' . $order_status . "\n\n";
				$text .= $language->get('text_new_products') . "\n";
				
				foreach ($order_product_query->rows as $product) {
					$text .= $product['quantity'] . 'x ' . $product['name'] . ' (' . $product['model'] . ') ' . html_entity_decode($this->currency->format($product['total'] + ($this->config->get('config_tax') ? ($product['tax'] * $product['quantity']) : 0), $order_info['currency_code'], $order_info['currency_value']), ENT_NOQUOTES, 'UTF-8') . "\n";
					
					$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$new_order_id . "' AND order_product_id = '" . $product['order_product_id'] . "'");
					
					foreach ($order_option_query->rows as $option) {
						if ($option['type'] != 'file') {
							$value = $option['value'];
						} else {
							$value = utf8_substr($option['value'], 0, utf8_strrpos($option['value'], '.'));
						}
											
						$text .= chr(9) . '-' . $option['name'] . ' ' . (utf8_strlen($value) > 20 ? utf8_substr($value, 0, 20) . '..' : $value) . "\n";
					}
				}
				
				foreach ($order_voucher_query->rows as $voucher) {
					$text .= '1x ' . $voucher['description'] . ' ' . $this->currency->format($voucher['amount'], $order_info['currency_code'], $order_info['currency_value']);
				}
							
				$text .= "\n";

				$text .= $language->get('text_new_order_total') . "\n";
				
				foreach ($order_total_query->rows as $total) {
					$text .= $total['title'] . ': ' . html_entity_decode($total['text'], ENT_NOQUOTES, 'UTF-8') . "\n";
				}			
				
				$text .= "\n";
				
				if ($order_info['comment']) {
					$text .= $language->get('text_new_comment') . "\n\n";
					$text .= $order_info['comment'] . "\n\n";
				}
			
				$mail = new Mail(); 
				$mail->protocol = $this->config->get('config_mail_protocol');
				$mail->parameter = $this->config->get('config_mail_parameter');
				$mail->hostname = $this->config->get('config_smtp_host');
				$mail->username = $this->config->get('config_smtp_username');
				$mail->password = $this->config->get('config_smtp_password');
				$mail->port = $this->config->get('config_smtp_port');
				$mail->timeout = $this->config->get('config_smtp_timeout');
				$mail->setTo($this->config->get('config_email'));
				$mail->setFrom($this->config->get('config_email'));
				$mail->setSender($order_info['store_name']);
				$mail->setSubject(html_entity_decode($subject, ENT_QUOTES, 'UTF-8'));
				$mail->setText(html_entity_decode($text, ENT_QUOTES, 'UTF-8'));
				$mail->send();
				
				// Send to additional alert emails
				$emails = explode(',', $this->config->get('config_alert_emails'));
				
				foreach ($emails as $email) {
					if ($email && preg_match('/^[^\@]+@.*\.[a-z]{2,6}$/i', $email)) {
						$mail->setTo($email);
						$mail->send();
					}
				}				
			}		
		}
	}
	private function updateRecurringProfileNew($profileid,$trialboolean, $new_order_id, $pptransactionid) {
	
	
			//CONNECT WITH PAY PAL TO GET RECURRING PROFILE INFORMATION
	    $request  = 'METHOD=' .urlencode("GetRecurringPaymentsProfileDetails");
	    $request .= '&VERSION=' .urlencode("53.0");
	    $request .= '&USER=' . urlencode($this->config->get('pp_pro_recurring_username'));
		$request .= '&PWD=' . urlencode($this->config->get('pp_pro_recurring_password'));
		$request .= '&SIGNATURE=' . urlencode($this->config->get('pp_pro_recurring_signature'));
		
		//new profile fields
		$request .= '&PROFILEID=' . urlencode($profileid);
		
		
		$curl = curl_init('https://api-3t.paypal.com/nvp');
		
		curl_setopt($curl, CURLOPT_PORT, 443);
		curl_setopt($curl, CURLOPT_HEADER, 0);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_FORBID_REUSE, 1);
        curl_setopt($curl, CURLOPT_FRESH_CONNECT, 1);
        curl_setopt($curl, CURLOPT_POST, 1);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $request);

		$response = curl_exec($curl);
 		
		curl_close($curl);
 
		if (!$response) {
			$this->log->write('Get Profile Recurring details failed: ' . curl_error($curl) . '(' . curl_errno($curl) . ')');
		}
 
 		$response_data = array();
 
		parse_str($response, $response_data);
		if (($response_data['ACK'] == 'Success') || ($response_data['ACK'] == 'SuccessWithWarning')) {
          
			
		   $data = array(
		'paypal_recurringprofile_id' => isset($response_data['PROFILEID']) ? $response_data['PROFILEID'] : "",
		'paypal_recurring_status' => isset($response_data['STATUS']) ? $response_data['STATUS'] : "",
		'paypal_recurring_desc' => isset($response_data['DESC']) ? $response_data['DESC'] : "",
		'paypal_recurring_autobillamount' => isset($response_data['AUTOBILLOUTAMT']) ? $response_data['AUTOBILLOUTAMT'] : "",
		'paypal_recurring_maxfailedpayments' => isset($response_data['MAXFAILEDPAYMENTS']) ? $response_data['MAXFAILEDPAYMENTS'] : "",
		'paypal_recurring_finalpaymentduedate' => isset($response_data['FINALPAYMENTDUEDATE']) ? $response_data['FINALPAYMENTDUEDATE'] : "",
		'paypal_recurring_subscribername' => isset($response_data['SUBSCRIBERNAME']) ? $response_data['SUBSCRIBERNAME'] : "",
		'paypal_recurring_startdate' => isset($response_data['PROFILESTARTDATE']) ? $response_data['PROFILESTARTDATE'] : "",
		'paypal_recurring_reference' => isset($response_data['PROFILEREFERENCE']) ? $response_data['PROFILEREFERENCE'] : "",
		'paypal_recurring_billingperiod' => isset($response_data['BILLINGPERIOD']) ? $response_data['BILLINGPERIOD'] : "",
		'paypal_recurring_regularbillingperiod' => isset($response_data['REGULARBILLINGPERIOD']) ? $response_data['REGULARBILLINGPERIOD'] : "",
		'paypal_recurring_billingfrequency' => isset($response_data['BILLINGFREQUENCY']) ? $response_data['BILLINGFREQUENCY'] : "",
		'paypal_recurring_regularbillingfrequency' => isset($response_data['REGULARBILLINGFREQUENCY']) ? $response_data['REGULARBILLINGFREQUENCY'] : "",
		'paypal_recurring_totalbillingcycles' => isset($response_data['TOTALBILLINGCYCLES']) ? $response_data['TOTALBILLINGCYCLES'] : "",
		'paypal_recurring_regulartotalbillingcycles' => isset($response_data['REGULARTOTALBILLINGCYCLES']) ? $response_data['REGULARTOTALBILLINGCYCLES'] : "",
		'paypal_recurring_amount' => isset($response_data['AMT']) ? $response_data['AMT'] : "",
		'paypal_recurring_regularamount' => isset($response_data['REGULARAMT']) ? $response_data['REGULARAMT'] : "",
		'paypal_recurring_shippingamount' => isset($response_data['SHIPPINGAMT']) ? $response_data['SHIPPINGAMT'] : "",
		'paypal_recurring_regularshippingamount' => isset($response_data['REGULARSHIPPINGAMT']) ? $response_data['REGULARSHIPPINGAMT'] : "",
		'paypal_recurring_taxamount' => isset($response_data['TAXAMT']) ? $response_data['TAXAMT'] : "",
		'paypal_recurring_regulartaxamount' => isset($response_data['REGULARTAXAMT']) ? $response_data['REGULARTAXAMT'] : "",
		'paypal_recurring_nextbilldate' => isset($response_data['NEXTBILLINGDATE']) ? $response_data['NEXTBILLINGDATE'] : "",
		'paypal_recurring_cyclescompleted' => isset($response_data['NUMCYCYLESCOMPLETED']) ? $response_data['NUMCYCYLESCOMPLETED'] : "",
		'paypal_recurring_cyclesremaining' => isset($response_data['NUMCYCLESREMAINING']) ? $response_data['NUMCYCLESREMAINING'] : "",
		'paypal_recurring_outstandingbalance' => isset($response_data['OUTSTANDINGBALANCE']) ? $response_data['OUTSTANDINGBALANCE'] : "",
		'paypal_recurring_lastpaymentdate' => isset($response_data['LASTPAYMENTDATE']) ? $response_data['LASTPAYMENTDATE'] : "",
		'paypal_recurring_lastpaymentamount' => isset($response_data['LASTPAYMENTAMT']) ? $response_data['LASTPAYMENTAMT'] : "",
		'paypal_recurring_cctype' => isset($response_data['CREDITCARDTYPE']) ? $response_data['CREDITCARDTYPE'] : "",
		'paypal_recurring_ccnumber' => isset($response_data['ACCT']) ? $response_data['ACCT'] : "",
		'paypal_recurring_ccexpire' => isset($response_data['EXPDATE']) ? $response_data['EXPDATE'] : "",
		'paypal_recurring_maestrostartdate' => isset($response_data['STARTDATE']) ? $response_data['STARTDATE'] : "",
		'paypal_recurring_maestronumber' => isset($response_data['ISSUENUMBER']) ? $response_data['ISSUENUMBER'] : "");
		
			//UPDATE TRIAL PROFILE WITH CURRENT INFORMATION
			
			$this->updateRecurringInfoNew($data,$trialboolean,$new_order_id,$pptransactionid);
		}
	}
	
		private function updateRecurringProfile($profileid,$trialboolean, $new_order_id, $pptransactionid, $order_id) {
	
	
			//CONNECT WITH PAY PAL TO GET RECURRING PROFILE INFORMATION
	    $request  = 'METHOD=' .urlencode("GetRecurringPaymentsProfileDetails");
	    $request .= '&VERSION=' .urlencode("53.0");
	    $request .= '&USER=' . urlencode($this->config->get('pp_pro_recurring_username'));
		$request .= '&PWD=' . urlencode($this->config->get('pp_pro_recurring_password'));
		$request .= '&SIGNATURE=' . urlencode($this->config->get('pp_pro_recurring_signature'));
		
		//new profile fields
		$request .= '&PROFILEID=' . urlencode($profileid);
		
		
		$curl = curl_init('https://api-3t.paypal.com/nvp');
		
		curl_setopt($curl, CURLOPT_PORT, 443);
		curl_setopt($curl, CURLOPT_HEADER, 0);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_FORBID_REUSE, 1);
        curl_setopt($curl, CURLOPT_FRESH_CONNECT, 1);
        curl_setopt($curl, CURLOPT_POST, 1);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $request);

		$response = curl_exec($curl);
 		
		curl_close($curl);
 
		if (!$response) {
			$this->log->write('Get Profile Recurring details failed: ' . curl_error($curl) . '(' . curl_errno($curl) . ')');
		}
 
 		$response_data = array();
 
		parse_str($response, $response_data);
		if (($response_data['ACK'] == 'Success') || ($response_data['ACK'] == 'SuccessWithWarning')) {
          
			
		   $data = array(
		'paypal_recurringprofile_id' => isset($response_data['PROFILEID']) ? $response_data['PROFILEID'] : "",
		'paypal_recurring_status' => isset($response_data['STATUS']) ? $response_data['STATUS'] : "",
		'paypal_recurring_desc' => isset($response_data['DESC']) ? $response_data['DESC'] : "",
		'paypal_recurring_autobillamount' => isset($response_data['AUTOBILLOUTAMT']) ? $response_data['AUTOBILLOUTAMT'] : "",
		'paypal_recurring_maxfailedpayments' => isset($response_data['MAXFAILEDPAYMENTS']) ? $response_data['MAXFAILEDPAYMENTS'] : "",
		'paypal_recurring_finalpaymentduedate' => isset($response_data['FINALPAYMENTDUEDATE']) ? $response_data['FINALPAYMENTDUEDATE'] : "",
		'paypal_recurring_subscribername' => isset($response_data['SUBSCRIBERNAME']) ? $response_data['SUBSCRIBERNAME'] : "",
		'paypal_recurring_startdate' => isset($response_data['PROFILESTARTDATE']) ? $response_data['PROFILESTARTDATE'] : "",
		'paypal_recurring_reference' => isset($response_data['PROFILEREFERENCE']) ? $response_data['PROFILEREFERENCE'] : "",
		'paypal_recurring_billingperiod' => isset($response_data['BILLINGPERIOD']) ? $response_data['BILLINGPERIOD'] : "",
		'paypal_recurring_regularbillingperiod' => isset($response_data['REGULARBILLINGPERIOD']) ? $response_data['REGULARBILLINGPERIOD'] : "",
		'paypal_recurring_billingfrequency' => isset($response_data['BILLINGFREQUENCY']) ? $response_data['BILLINGFREQUENCY'] : "",
		'paypal_recurring_regularbillingfrequency' => isset($response_data['REGULARBILLINGFREQUENCY']) ? $response_data['REGULARBILLINGFREQUENCY'] : "",
		'paypal_recurring_totalbillingcycles' => isset($response_data['TOTALBILLINGCYCLES']) ? $response_data['TOTALBILLINGCYCLES'] : "",
		'paypal_recurring_regulartotalbillingcycles' => isset($response_data['REGULARTOTALBILLINGCYCLES']) ? $response_data['REGULARTOTALBILLINGCYCLES'] : "",
		'paypal_recurring_amount' => isset($response_data['AMT']) ? $response_data['AMT'] : "",
		'paypal_recurring_regularamount' => isset($response_data['REGULARAMT']) ? $response_data['REGULARAMT'] : "",
		'paypal_recurring_shippingamount' => isset($response_data['SHIPPINGAMT']) ? $response_data['SHIPPINGAMT'] : "",
		'paypal_recurring_regularshippingamount' => isset($response_data['REGULARSHIPPINGAMT']) ? $response_data['REGULARSHIPPINGAMT'] : "",
		'paypal_recurring_taxamount' => isset($response_data['TAXAMT']) ? $response_data['TAXAMT'] : "",
		'paypal_recurring_regulartaxamount' => isset($response_data['REGULARTAXAMT']) ? $response_data['REGULARTAXAMT'] : "",
		'paypal_recurring_nextbilldate' => isset($response_data['NEXTBILLINGDATE']) ? $response_data['NEXTBILLINGDATE'] : "",
		'paypal_recurring_cyclescompleted' => isset($response_data['NUMCYCYLESCOMPLETED']) ? $response_data['NUMCYCYLESCOMPLETED'] : "",
		'paypal_recurring_cyclesremaining' => isset($response_data['NUMCYCLESREMAINING']) ? $response_data['NUMCYCLESREMAINING'] : "",
		'paypal_recurring_outstandingbalance' => isset($response_data['OUTSTANDINGBALANCE']) ? $response_data['OUTSTANDINGBALANCE'] : "",
		'paypal_recurring_lastpaymentdate' => isset($response_data['LASTPAYMENTDATE']) ? $response_data['LASTPAYMENTDATE'] : "",
		'paypal_recurring_lastpaymentamount' => isset($response_data['LASTPAYMENTAMT']) ? $response_data['LASTPAYMENTAMT'] : "",
		'paypal_recurring_cctype' => isset($response_data['CREDITCARDTYPE']) ? $response_data['CREDITCARDTYPE'] : "",
		'paypal_recurring_ccnumber' => isset($response_data['ACCT']) ? $response_data['ACCT'] : "",
		'paypal_recurring_ccexpire' => isset($response_data['EXPDATE']) ? $response_data['EXPDATE'] : "",
		'paypal_recurring_maestrostartdate' => isset($response_data['STARTDATE']) ? $response_data['STARTDATE'] : "",
		'paypal_recurring_maestronumber' => isset($response_data['ISSUENUMBER']) ? $response_data['ISSUENUMBER'] : "");
		
			//UPDATE TRIAL PROFILE WITH CURRENT INFORMATION
			
			$this->updateRecurringInfo($data,$trialboolean,$new_order_id,$pptransactionid,$order_id);
		}
	}
private function getCustomerId($orderid) {
		
				
		$query = $this->db->query("SELECT customer_id FROM `" . DB_PREFIX . "order` WHERE order_id = '" . (int)$orderid . "'");
		
		return $query->row;	
	}
	private function getRecurringCustomerGroupId() {
		
				
		$query = $this->db->query("SELECT customer_group_id FROM `" . DB_PREFIX . "customer_group` WHERE is_recurring = '1'");
		
		return $query->row;	
	}
private function updateRecurringInfoNew($data = array(),$trialboolean,$new_order_id,$pptransactionid) {	

	//Update the new Order 
$this->db->query("UPDATE `" . DB_PREFIX . "order` SET paypal_recurring_trial_status = '" . (int)$trialboolean . "' , date_modified	 = NOW(), paypal_transaction_id = '" . (string)$pptransactionid . "', paypal_recurringprofile_id = '" . (string)$data['paypal_recurringprofile_id'] . "',paypal_recurring_status = '" . (string)$data['paypal_recurring_status'] . "',paypal_recurring_desc = '" . (string)addslashes($data['paypal_recurring_desc']) . "',paypal_recurring_autobillamount = '" . (string)$data['paypal_recurring_autobillamount'] . "',paypal_recurring_maxfailedpayments = '" . (int)$data['paypal_recurring_maxfailedpayments'] . "',paypal_recurring_finalpaymentduedate = '" . (string)$data['paypal_recurring_finalpaymentduedate'] . "',paypal_recurring_subscribername = '" . (string)$data['paypal_recurring_subscribername'] . "',paypal_recurring_startdate = '" . (string)$data['paypal_recurring_startdate'] . "',paypal_recurring_reference = '" . (string)$data['paypal_recurring_reference'] . "',paypal_recurring_billingperiod = '" . (string)$data['paypal_recurring_billingperiod'] . "',paypal_recurring_regularbillingperiod = '" . (string)$data['paypal_recurring_regularbillingperiod'] . "',paypal_recurring_billingfrequency = '" . (int)$data['paypal_recurring_billingfrequency'] . "',paypal_recurring_regularbillingfrequency = '" . (int)$data['paypal_recurring_regularbillingfrequency'] . "',paypal_recurring_totalbillingcycles = '" . (int)$data['paypal_recurring_totalbillingcycles'] . "',paypal_recurring_regulartotalbillingcycles = '" . (int)$data['paypal_recurring_regulartotalbillingcycles'] . "',paypal_recurring_amount = '" . (float)$data['paypal_recurring_amount'] . "',paypal_recurring_regularamount = '" . (float)$data['paypal_recurring_regularamount'] . "',paypal_recurring_shippingamount = '" . (float)$data['paypal_recurring_shippingamount'] . "',paypal_recurring_regularshippingamount = '" . (float)$data['paypal_recurring_regularshippingamount'] . "',paypal_recurring_taxamount = '" . (float)$data['paypal_recurring_taxamount'] . "',paypal_recurring_regulartaxamount = '" . (float)$data['paypal_recurring_regulartaxamount'] . "',paypal_recurring_nextbilldate = '" . (string)$data['paypal_recurring_nextbilldate'] . "',paypal_recurring_cyclescompleted = '" . (int)$data['paypal_recurring_cyclescompleted']. "',paypal_recurring_cyclesremaining = '" . (int)$data['paypal_recurring_cyclesremaining'] . "',paypal_recurring_outstandingbalance = '" . (float)$data['paypal_recurring_outstandingbalance'] . "',paypal_recurring_lastpaymentdate = '" . (string)$data['paypal_recurring_lastpaymentdate'] . "',paypal_recurring_lastpaymentamount = '" . (float)$data['paypal_recurring_lastpaymentamount'] . "',paypal_recurring_cctype = '" . (string)$data['paypal_recurring_cctype'] . "',paypal_recurring_ccnumber = '" . (int)$data['paypal_recurring_ccnumber'] . "',paypal_recurring_ccexpire = '" . (string)$data['paypal_recurring_ccexpire'] . "',paypal_recurring_maestrostartdate = '" . (string)$data['paypal_recurring_maestrostartdate'] . "',paypal_recurring_maestronumber = '" . (int)$data['paypal_recurring_maestronumber'] . "',  paypal_is_original_order = '1' WHERE order_id = '" . (int)$new_order_id . "'");

        $customer_id = $this->getCustomerId($new_order_id);	
		$recurring_group_id = $this->getRecurringCustomerGroupId();			
		if($recurring_group_id){
			$recurring_group_id = $recurring_group_id['customer_group_id'];
		}else{
			$recurring_group_id = $this->config->get('config_customer_group_id');
			
		}
		if($data['paypal_recurring_status'] == "Cancelled"){
		$this->db->query("UPDATE `" . DB_PREFIX . "customer` SET customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' WHERE customer_id = '" . (int)$customer_id['customer_id'] . "'");
		}else{
		$this->db->query("UPDATE `" . DB_PREFIX . "customer` SET customer_group_id = '" . (int)$recurring_group_id . "' WHERE customer_id = '" . (int)$customer_id['customer_id'] . "'");
		}	
				
}
private function updateRecurringInfo($data = array(),$trialboolean,$new_order_id,$pptransactionid, $order_id) {	


	//Update the new Order 
$this->db->query("UPDATE `" . DB_PREFIX . "order` SET  paypal_recurringprofile_id = '" . (string)$data['paypal_recurringprofile_id'] . "', paypal_recurring_subscribername = '" . (string)$data['paypal_recurring_subscribername'] . "', paypal_recurring_lastpaymentdate = '" . (string)$data['paypal_recurring_lastpaymentdate'] . "', paypal_recurring_lastpaymentamount = '" . (float)$data['paypal_recurring_lastpaymentamount'] . "', paypal_recurring_cctype = '" . (string)$data['paypal_recurring_cctype'] . "', paypal_recurring_ccnumber = '" . (int)$data['paypal_recurring_ccnumber'] . "', paypal_recurring_ccexpire = '" . (string)$data['paypal_recurring_ccexpire'] . "', paypal_recurring_maestrostartdate = '" . (string)$data['paypal_recurring_maestrostartdate'] . "', paypal_recurring_maestronumber = '" . (int)$data['paypal_recurring_maestronumber'] . "' WHERE order_id = '" . (int)$new_order_id . "'");


//Update original profile order
if($data['paypal_recurring_status'] == "Expired"){
$order_status_id = $this->config->get('pp_pro_recurring_expired_order_status_id');
}else{
$order_status_id = $this->config->get('pp_pro_recurring_order_status_id');

}
$this->db->query("UPDATE `" . DB_PREFIX . "order` SET order_status_id = '" . (int)$order_status_id . "' , paypal_recurring_trial_status = '" . (int)$trialboolean . "' , date_modified	 = NOW(), paypal_transaction_id = '" . (string)$pptransactionid . "',  paypal_recurringprofile_id = '" . (string)$data['paypal_recurringprofile_id'] . "',paypal_recurring_status = '" . (string)$data['paypal_recurring_status'] . "',paypal_recurring_desc = '" . (string)addslashes($data['paypal_recurring_desc']) . "',paypal_recurring_autobillamount = '" . (string)$data['paypal_recurring_autobillamount'] . "',paypal_recurring_maxfailedpayments = '" . (int)$data['paypal_recurring_maxfailedpayments'] . "',paypal_recurring_finalpaymentduedate = '" . (string)$data['paypal_recurring_finalpaymentduedate'] . "',paypal_recurring_subscribername = '" . (string)$data['paypal_recurring_subscribername'] . "',paypal_recurring_startdate = '" . (string)$data['paypal_recurring_startdate'] . "',paypal_recurring_reference = '" . (string)$data['paypal_recurring_reference'] . "',paypal_recurring_billingperiod = '" . (string)$data['paypal_recurring_billingperiod'] . "',paypal_recurring_regularbillingperiod = '" . (string)$data['paypal_recurring_regularbillingperiod'] . "',paypal_recurring_billingfrequency = '" . (int)$data['paypal_recurring_billingfrequency'] . "',paypal_recurring_regularbillingfrequency = '" . (int)$data['paypal_recurring_regularbillingfrequency'] . "',paypal_recurring_totalbillingcycles = '" . (int)$data['paypal_recurring_totalbillingcycles'] . "',paypal_recurring_regulartotalbillingcycles = '" . (int)$data['paypal_recurring_regulartotalbillingcycles'] . "',paypal_recurring_amount = '" . (float)$data['paypal_recurring_amount'] . "',paypal_recurring_regularamount = '" . (float)$data['paypal_recurring_regularamount'] . "',paypal_recurring_shippingamount = '" . (float)$data['paypal_recurring_shippingamount'] . "',paypal_recurring_regularshippingamount = '" . (float)$data['paypal_recurring_regularshippingamount'] . "',paypal_recurring_taxamount = '" . (float)$data['paypal_recurring_taxamount'] . "',paypal_recurring_regulartaxamount = '" . (float)$data['paypal_recurring_regulartaxamount'] . "',paypal_recurring_nextbilldate = '" . (string)$data['paypal_recurring_nextbilldate'] . "',paypal_recurring_cyclescompleted = '" . (int)$data['paypal_recurring_cyclescompleted']. "',paypal_recurring_cyclesremaining = '" . (int)$data['paypal_recurring_cyclesremaining'] . "',paypal_recurring_outstandingbalance = '" . (float)$data['paypal_recurring_outstandingbalance'] . "',paypal_recurring_lastpaymentdate = '" . (string)$data['paypal_recurring_lastpaymentdate'] . "',paypal_recurring_lastpaymentamount = '" . (float)$data['paypal_recurring_lastpaymentamount'] . "',paypal_recurring_cctype = '" . (string)$data['paypal_recurring_cctype'] . "',paypal_recurring_ccnumber = '" . (int)$data['paypal_recurring_ccnumber'] . "',paypal_recurring_ccexpire = '" . (string)$data['paypal_recurring_ccexpire'] . "',paypal_recurring_maestrostartdate = '" . (string)$data['paypal_recurring_maestrostartdate'] . "',paypal_recurring_maestronumber = '" . (int)$data['paypal_recurring_maestronumber'] . "', paypal_recurring_trial_status	 = '" . (int)$trialboolean . "', paypal_recurring_count = (paypal_recurring_count + 1) WHERE order_id = '" . (int)$order_id . "'");

         $customer_id = $this->getCustomerId($order_id);	
		$recurring_group_id = $this->getRecurringCustomerGroupId();			
		if($recurring_group_id){
			$recurring_group_id = $recurring_group_id['customer_group_id'];
		}else{
			$recurring_group_id = $this->config->get('config_customer_group_id');
			
		}
		if($data['paypal_recurring_status'] == "Cancelled"){
		$this->db->query("UPDATE `" . DB_PREFIX . "customer` SET customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' WHERE customer_id = '" . (int)$customer_id['customer_id'] . "'");
		}else{
		$this->db->query("UPDATE `" . DB_PREFIX . "customer` SET customer_group_id = '" . (int)$recurring_group_id . "' WHERE customer_id = '" . (int)$customer_id['customer_id'] . "'");
		}	
	
				
}
            ]]></add>     
	</operation>
		</file>

	<file name="admin/controller/catalog/product.php">
        <operation>
            <search position="after"><![CDATA[
		$this->data['entry_minimum'] = $this->language->get('entry_minimum');
            ]]></search>
            <add><![CDATA[
		$this->data['entry_maximum'] = $this->language->get('entry_maximum');
            ]]></add>
        </operation>
		
		  <operation>
            <search position="before"><![CDATA[
		public function insert() {
            ]]></search>
            <add><![CDATA[
		public function category() {	
		
		
		if (isset($this->request->get['category_id'])) {
			$category_id = $this->request->get['category_id'];
		} else {
			$category_id = 0;
		}
		
		$product_data = array();
		
		$results = $this->getProductsByCategoryId($category_id);
		
		foreach ($results as $result) {
			$product_data[] = array(
				'product_id' => $result['product_id'],
				'name'       => $result['name'],
				'model'      => $result['model']
			);
		}
		
		
		
		$this->response->setOutput(json_encode($product_data));
	}
	public function getProductsByCategoryId($category_id) {
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_category p2c ON (p.product_id = p2c.product_id) WHERE pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p2c.category_id = '" . (int)$category_id . "' AND p.is_recurring = '1' ORDER BY pd.name ASC");
								  
		return $query->rows;
	} 
	private function getProducts($products) {
		
		$product_data = array();
		foreach ($products as $product_id) {
		$query = $this->db->query("SELECT DISTINCT * FROM `" . DB_PREFIX . "product` p LEFT JOIN `" . DB_PREFIX . "product_description` pd ON (p.product_id = pd.product_id) WHERE p.product_id = '" . (int)$product_id . "' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "'");
			 
			if ($query) {
				$product_data[] = array(
					'product_id' => $query->row['product_id'],
					'name'       => $query->row['name'],
					'model'      => $query->row['model']
				);
			}
		}
		return $product_data;
	}
	
            ]]></add>
        </operation>
		<operation>
            <search position="before"><![CDATA[
			
		if (isset($this->request->post['minimum'])) {
            ]]></search>
            <add><![CDATA[
			
			$getcombo = $this->db->query("SELECT recurring_combo FROM `" . DB_PREFIX . "product`  WHERE product_id = '" . (int)$this->request->get['product_id'] . "' AND is_trial = '1'");
             
			if (isset($this->request->post['appendedregularproducts'])) {
			
			$this->data['appendedregularproducts'] = $this->getProducts($this->request->post['appendedregularproducts']);
		
		} else if($getcombo->num_rows){
		if($getcombo->row['recurring_combo'] != ""){
		$combo = unserialize($getcombo->row['recurring_combo']);
			$this->data['appendedregularproducts'] = $this->getProducts($combo);
			}else{
			$this->data['appendedregularproducts'] = array();
			}
		}else{
			$this->data['appendedregularproducts'] = array();
		}
		
		if (isset($this->request->post['maximum'])) {
      		$this->data['maximum'] = $this->request->post['maximum'];
    	} elseif (isset($product_info)) {
      		$this->data['maximum'] = $product_info['maximum'];
    	} else {
			$this->data['maximum'] = 0;
		}
            ]]></add>
        </operation>
		<operation>
            <search position="before"><![CDATA[
			if (isset($this->request->post['product_description'])) {
            ]]></search>
			
			  <add trim="true"><![CDATA[ 
			  $this->load->model('catalog/category');
		    $this->data['categories'] = $this->model_catalog_category->getCategories(0);
			$recurring_check = $this->db->query("SELECT COUNT(*) AS total FROM `" . DB_PREFIX . "product` WHERE is_recurring = '1'");
            
			$this->data['recurring_check'] = $recurring_check->row['total'];
			  	$this->load->model('tool/image'); 
				//regulars
			$recurringitemslist = $this->model_catalog_product->getRecurringItems();
			$this->data['recurringlist'] = array();
			if($recurringitemslist){
			foreach($recurringitemslist as $productid){	
			if(file_exists(DIR_IMAGE . $productid['image'])) {
			$thumb = $this->model_tool_image->resize($productid['image'], 75, 75);
		} else {
			$thumb = $this->model_tool_image->resize('no_image.jpg', 75, 75);
		}		
			$this->data['recurringlist'][] = array(
			'product_id' => $productid['product_id'],
			'model' => $productid['model'],
			'price' => "$".number_format($productid['price'],2),
			'quantity' => $productid['quantity'],
			'name' => $this->model_catalog_product->getRecurringItemName($productid['product_id']),
			'tinythumb' => $thumb
			
			);
			
			}
			
			}else{
			$this->data['recurringlist'] = array();
			
			}
			//trials
			$trialitemslist = $this->model_catalog_product->getTrialItems();
			$this->data['triallist'] = array();
			if($trialitemslist){
			foreach($trialitemslist as $productid){	
			if(file_exists(DIR_IMAGE . $productid['image'])) {
			$thumb = $this->model_tool_image->resize($productid['image'], 75, 75);
		} else {
			$thumb = $this->model_tool_image->resize('no_image.jpg', 75, 75);
		}		
			$this->data['triallist'][] = array(
			'product_id' => $productid['product_id'],
			'model' => $productid['model'],
			'price' => "$".number_format($productid['price'],2),
			'quantity' => $productid['quantity'],
			'name' => $this->model_catalog_product->getTrialItemName($productid['product_id']),
			'tinythumb' => $thumb
			
			);
			
			}
			
			}else{
			$this->data['triallist'] = array();
			
			}
			//combos
			$combos = $this->model_catalog_product->getComboItems();
			$this->data['combolist'] = array();
			if($combos){
			foreach($combos as $productid){	
			if(file_exists(DIR_IMAGE . $productid['image'])) {
			$thumb = $this->model_tool_image->resize($productid['image'], 75, 75);
		} else {
			$thumb = $this->model_tool_image->resize('no_image.jpg', 75, 75);
		}		
			$this->data['combolist'][] = array(
			'product_id' => $productid['product_id'],
			'model' => $productid['model'],
			'comboitems' => $this->getProducts(unserialize($productid['recurring_combo'])),
			'price' => "$".number_format($productid['price'],2),
			'quantity' => $productid['quantity'],
			'name' => $this->model_catalog_product->getTrialItemName($productid['product_id']),
			'tinythumb' => $thumb
			
			);
			
			}
			
			}else{
			$this->data['combolist'] = array();
			
			}
			
    
				]]></add>     
	</operation>	

<operation>
            <search position="before"><![CDATA[
			if (isset($this->request->post['product_description'])) {
            ]]></search>
			
			  <add trim="true"><![CDATA[  
			if (isset($this->request->post['recurringitem'])) {
      		$this->data['isrecurring'] = $this->request->post['recurringitem'];
    	} elseif (!empty($product_info)) {
			$this->data['isrecurring'] = $product_info['is_recurring'];
		} else {
      		$this->data['isrecurring'] = 0;
    	}
		if (isset($this->request->post['trialitem'])) {
      		$this->data['istrial'] = $this->request->post['trialitem'];
    	} elseif (!empty($product_info)) {
			$this->data['istrial'] = $product_info['is_trial'];
		} else {
      		$this->data['istrial'] = 0;
    	}
    
				]]></add>     
	</operation>	
	</file>

	<file name="admin/language/english/catalog/product.php">
        <operation>
            <search position="after"><![CDATA[
		$_['entry_minimum']          = 'Minimum Quantity:<br/><span class="help">Force a minimum ordered amount</span>';
            ]]></search>
            <add><![CDATA[
		$_['entry_maximum']          = 'Maximum Quantity:<br/><span class="help">Force a maximum order amount</span>';
            ]]></add>
        </operation>
	</file>

	
	<file name="catalog/controller/checkout/checkout.php">
        <operation>
            <search position="after" index="4"><![CDATA[
		}
            ]]></search>
            <add><![CDATA[
				if (($product['maximum']) > 0 && ($product['maximum']) < ($product_total)) {
				$this->redirect($this->url->link('checkout/cart'));
			}			
            ]]></add>
        </operation>
	</file>
	
	<file name="catalog/controller/checkout/cart.php">
	<operation>
            <search position="replace"><![CDATA[
			$this->cart->add($this->request->post['product_id'], $quantity, $option);
            ]]></search>
			
			  <add trim="true"><![CDATA[ 
			   
			   $pid_array = array();
			   $recurring_item_flag = $this->db->query("SELECT product_id FROM `" . DB_PREFIX . "product` WHERE is_recurring = '1' OR is_trial = '1'");
			   if($recurring_item_flag){
			   foreach($recurring_item_flag->rows as $value){
			   $pid_array[] = $value['product_id'];
			   }
				
				if(in_array($this->request->post['product_id'],$pid_array)){	
				
				   foreach ($this->cart->getProducts() as $result) {
				   
				      if($result['product_id'] !== $this->request->post['product_id']){	
				            $this->cart->remove($result['product_id']);	
							if($result['key']){
							$this->cart->remove($result['key']);	
							}
				      }
				   
				    }
				    $this->cart->add($this->request->post['product_id'], $quantity, $option);
				   
				}else{
				foreach($pid_array as $pid){
				  foreach ($this->cart->getProducts() as $result) {
				  if($result['product_id'] === $pid){	
									
					  $this->cart->remove($pid);
					if($result['key']){
							$this->cart->remove($result['key']);	
							}
					}
					}
					}
					
					
					 $this->cart->add($this->request->post['product_id'], $quantity, $option);
				}	
			   			
				}else{
				
				$this->cart->add($this->request->post['product_id'], $quantity, $option);				
						
				}
				
				
			
  ]]></add>     
	</operation>
	<operation>
            <search position="after"><![CDATA[
			foreach ($products as $product) {
            
            ]]></search>
			
			  <add trim="true"><![CDATA[   
		$trial_product_ids = $this->db->query("SELECT product_id FROM `" . DB_PREFIX . "product` WHERE is_trial = '1'");			
		$ids = array();
		if($trial_product_ids->num_rows){
	    
		foreach($trial_product_ids->rows as $product_id){
		$ids[] = $product_id['product_id'];
		}
		if(in_array($product['product_id'],$ids)){
		$trial_product_count = $this->db->query("SELECT COUNT(*) AS total FROM `" . DB_PREFIX . "product` p  LEFT JOIN `" . DB_PREFIX . "paypal_recurring_trials` prt ON (p.product_id = prt.trial_product) WHERE p.is_trial = '1' AND prt.trial_product = '".(int)$product['product_id']."'");
		if($trial_product_count->row['total'] < 1){
		if($this->config->get('pp_pro_recurring_trial')){		
			$this->data['error_warning'] = "You have a trial item in your cart that is not configured correctly, or is no longer available. Please contact an adminstrator";
		}else{
		     $this->data['error_warning'] = '';
		}
	}
}
}else{
 $this->data['error_warning'] = '';
}
			   ]]></add>     
	</operation>
	    <operation>
            <search position="before"><![CDATA[
if (isset($this->request->post['option'])) {
            ]]></search>
            <add><![CDATA[
				$product_total = 0;
				
				$products = $this->cart->getProducts();
				
				foreach ($products as $product_2) {
					if ($product_2['product_id'] == $this->request->post['product_id']) {
						$product_total += $product_2['quantity'];
					}
				}
			
				if (($product_info['maximum']) > 0 && ($product_info['maximum']) < ($product_total + $quantity)) {
					$json['error']['warning'] = sprintf($this->language->get('error_max_qty'), $product_info['name'], $product_info['maximum']);
				}
            ]]></add>
        </operation>
	
        <operation>
            <search position="before"><![CDATA[
				if ($product['image']) {
            ]]></search>
            <add><![CDATA[
				if (($product['maximum']) > 0 && ($product['maximum']) < ($product_total)) {
					$this->data['error_warning'] = sprintf($this->language->get('error_max_qty'), $product['name'], $product['maximum']);
				}
            ]]></add>
        </operation>
		
	    <operation>
            <search position="before"><![CDATA[
if ($product_option['required'] && empty($option[$product_option['product_option_id']])) {
            ]]></search>
            <add><![CDATA[
				if (($product_info['maximum']) > 0 && ($product_info['maximum']) < ($product_total + $quantity)) {
					$json['error']['warning'] = sprintf($this->language->get('error_max_qty'), $product_info['name'], $product_info['maximum']);
				}
            ]]></add>
        </operation>
		
	</file>
	
	<file name="catalog/controller/product/product.php">
        <operation>
            <search position="after"><![CDATA[
			$this->data['text_minimum'] = sprintf($this->language->get('text_minimum'), $product_info['minimum']);
            ]]></search>
            <add><![CDATA[
			$this->data['text_max_qty'] = sprintf($this->language->get('text_max_qty'), $product_info['maximum']);
            ]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[
			$this->data['review_status'] = $this->config->get('config_review_status');
            ]]></search>
            <add><![CDATA[
			if ($product_info['maximum']) {
				$this->data['maximum'] = $product_info['maximum'];
			} else {
				$this->data['maximum'] = 0;
			}
			
            ]]></add>
        </operation>
		</file>
		
		
	<file name="catalog/language/english/checkout/cart.php">
        <operation>
            <search position="after"><![CDATA[
'Minimum order amount for %s is %s!';	
            ]]></search>
            <add><![CDATA[
$_['error_max_qty']   = 'Maximum order amount for %s is %s!';	
            ]]></add>
        </operation>
	</file>
	
	<file name="catalog/model/catalog/product.php">
        <operation>
            <search position="after"><![CDATA[
'minimum'          => $query->row['minimum'],
            ]]></search>
            <add><![CDATA[
'maximum'          => $query->row['maximum'],
            ]]></add>
        </operation>
	</file>
	
	<file name="catalog/language/english/product/product.php">
        <operation>
            <search position="after"><![CDATA[
$_['text_minimum']      = 'This product has a minimum quantity of %s';
            ]]></search>
            <add><![CDATA[
$_['text_max_qty']      = 'This product has a maximum quantity of %s';
            ]]></add>
        </operation>
	</file>
	
	<file name="system/library/cart.php">
        <operation>
            <search position="after"><![CDATA[
$product_query->row['minimum'],
            ]]></search>
            <add><![CDATA[
        			'maximum'         => $product_query->row['maximum'],
            ]]></add>
        </operation>
	</file>

	<file name="catalog/view/theme/default/template/product/product.tpl">
        <operation>
            <search position="before"><![CDATA[
        <?php if ($minimum > 1) { ?>
            ]]></search>
            <add><![CDATA[
        <?php if ($maximum ) { ?>
        <div class="minimum"><?php echo $text_max_qty; ?></div>
        <?php } ?>
            ]]></add>
        </operation>

        <operation>
            <search position="before"><![CDATA[
if (json['error']) {
            ]]></search>
            <add><![CDATA[
			if (json['error']) {
				if (json['error']['warning']) {
					$('#notification').html('<div class="warning" style="display: none;">' + json['error']['warning'] + '<img src="catalog/view/theme/default/image/close.png" alt="" class="close" /></div>');
				
					$('.warning').fadeIn('slow');
				}
				
				for (i in json['error']) {
					$('#option-' + i).after('<span class="error">' + json['error'][i] + '</span>');
				}
			}	 
            ]]></add>
        </operation>
	</file>

	<file name="catalog/controller/payment/pp_pro.php">
<operation>
            <search position="after"><![CDATA[
			$request .= '&PAYMENTACTION=' . $payment_type;
            
            ]]></search>
			
			  <add trim="true"><![CDATA[  
			
			$request .= '&NOTIFYURL=' . urlencode(HTTP_SERVER .'payment/nomansland');
			
			   ]]></add>     
	</operation>
	
</file>
<file name="catalog/controller/payment/pp_pro_uk.php">
<operation>
            <search position="after"><![CDATA[
			$request .= '&TRXTYPE=' . $payment_type;
            
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
			$request .= '&NOTIFYURL=' . urlencode(HTTP_CATALOG .'payment/nomansland');
			   ]]></add>     
	</operation>
	
</file>
<file name="admin/model/sale/customer_group.php">
<operation>
            <search position="after"><![CDATA[
                $customer_group_id = $this->db->getLastId();            
            ]]></search>
			
			  <add trim="true"><![CDATA[   
			   if(isset($data['recurring'])){
			$recurring = (int)$data['recurring'];
		}else{
		$recurring = '';	
		} 
		$this->db->query("UPDATE " . DB_PREFIX . "customer_group SET is_recurring = '0'");		
	$this->db->query("UPDATE " . DB_PREFIX . "customer_group SET is_recurring = '" . $recurring . "' WHERE customer_group_id = '" . (int)$customer_group_id . "'");
  ]]></add>     
	</operation>
	<operation>
           <search position="after"><![CDATA[
            public function editCustomerGroup($customer_group_id, $data) {            
            ]]></search>
			
			  <add trim="true"><![CDATA[  
			  if(isset($data['recurring'])){
			$recurring = (int)$data['recurring'];
		}else{
		$recurring = '';	
		} 	
		$this->db->query("UPDATE " . DB_PREFIX . "customer_group SET is_recurring = '0'");		
	$this->db->query("UPDATE " . DB_PREFIX . "customer_group SET is_recurring = '" . $recurring . "' WHERE customer_group_id = '" . (int)$customer_group_id . "'");

			   ]]></add>     
	</operation>
	
</file>
<file name="admin/controller/sale/customer_group.php">
<operation>
            <search position="after"><![CDATA[
			$this->data['text_no'] = $this->language->get('text_no');
            
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
			$this->data['entry_is_recurring'] = 'Recurring Customer Group?';
			   ]]></add>     
	</operation>
	<operation>
            <search position="before"><![CDATA[
			if (isset($this->request->post['company_id_display'])) {
            
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
			if (isset($this->request->post['recurring'])) {
			$this->data['recurring'] = $this->request->post['recurring'];
		} elseif (!empty($customer_group_info)) {
			$this->data['recurring'] = $customer_group_info['is_recurring'];
		} else {
			$this->data['recurring'] = '';
		}	
			   ]]></add>     
	</operation>
	
</file>

<file name="admin/view/template/sale/customer_group_form.tpl">
<operation>
            <search position="before"><![CDATA[
			<?php echo $entry_approval; ?>
            
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
		  <tr>
            <td><?php echo $entry_is_recurring; ?></td>
            <td><?php if ($recurring) { ?>
              <input type="checkbox" name="recurring" value="1" checked="checked" />             
             
             
              <?php } else { ?>
              <input type="checkbox" name="recurring" value="1" />      
              
              <?php } ?></td>
          </tr>
			   ]]></add>     
	</operation>
	
</file>
<file name="catalog/controller/checkout/checkout.php">
<operation>
            <search position="before"><![CDATA[
			$products = $this->cart->getProducts();
            
            ]]></search>
			
			  <add trim="true"><![CDATA[   	
		$products = $this->cart->getProducts();
				
		foreach ($products as $product) {
        $trial_product_ids = $this->db->query("SELECT product_id FROM `" . DB_PREFIX . "product` WHERE is_trial = '1'");			
		$ids = array();
		if($trial_product_ids->num_rows){
	    
		foreach($trial_product_ids->rows as $product_id){
		$ids[] = $product_id['product_id'];
		}
		if(in_array($product['product_id'],$ids)){
		$trial_product_count = $this->db->query("SELECT COUNT(*) AS total FROM `" . DB_PREFIX . "product` p  LEFT JOIN `" . DB_PREFIX . "paypal_recurring_trials` prt ON (p.product_id = prt.trial_product) WHERE p.is_trial = '1' AND prt.trial_product = '".(int)$product['product_id']."'");
		if($trial_product_count->row['total'] < 1){
		if($this->config->get('pp_pro_recurring_trial')){		
			$this->redirect($this->url->link('checkout/cart'));
		}
	}
}
}
}
			   ]]></add>     
	</operation>
	
</file>

<file name="catalog/language/*/mail/order.php">
<operation>
            <search position="after"><![CDATA[
			$_['text_new_subject']
            
            ]]></search>
			
			  <add trim="true"><![CDATA[  
			
		$_['text_profile_id']     = 'Recurring Profile ID';
			   ]]></add>     
	</operation>
	
</file>

</modification>